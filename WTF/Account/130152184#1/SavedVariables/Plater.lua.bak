
PlaterDB = {
["captured_spells"] = {
[448002] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[338011] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Violent Muckmare",
["npcID"] = 166318,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211290,
},
[373526] = {
["isChanneled"] = false,
["source"] = "Jeweled Flutterwing",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 227202,
},
[444683] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Persistent Forager",
["npcID"] = 217404,
},
[426160] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2861,
},
[425011] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Eternal Flame",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210851,
},
[463081] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[462826] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Explosive Bomberbot",
["npcID"] = 229706,
},
[432805] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Radiating Voidstone",
["npcID"] = 212739,
},
[444431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211290,
},
[193473] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Void Tendril",
["npcID"] = 192337,
},
[256390] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206096,
},
[430125] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[450182] = {
["isChanneled"] = false,
["source"] = "Disturbed Mudspawn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219897,
},
[451843] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[454782] = {
["source"] = "Lurker of the Deeps",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220285,
},
[433448] = {
["isChanneled"] = true,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216621,
},
[115804] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[444946] = {
["source"] = "Stormtop Terralisk",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214581,
},
[135029] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[430256] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[188046] = {
["isChanneled"] = false,
["source"] = "Denizen of the Dream",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198489,
},
[49966] = {
["isChanneled"] = false,
["source"] = "Coldstomp the Griever",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[450442] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[445205] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderbee Drone",
["npcID"] = 215024,
},
[464240] = {
["isChanneled"] = false,
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212827,
},
[450188] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rummaging Mudnose",
["npcID"] = 225482,
},
[463091] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[429493] = {
["encounterName"] = "Skardyn Monstrosity",
["type"] = "DEBUFF",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2836,
},
[264057] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arixgorod",
["npcID"] = 17252,
},
[30213] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Az-barash",
["npcID"] = 17252,
},
[445718] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stolen Loader",
["npcID"] = 223541,
},
[378394] = {
["isChanneled"] = false,
["source"] = "Riled Kelpcoil",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225901,
},
[388231] = {
["isChanneled"] = false,
["source"] = "Tuskarr Training Dummy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196394,
},
[463093] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[392959] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[463094] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[444826] = {
["isChanneled"] = false,
["source"] = "King Thoras Trollbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221635,
},
[448787] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[453003] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Pausing Pylon",
["npcID"] = 225193,
},
[438823] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Diabolic Imp",
["npcID"] = 219161,
},
[456453] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Skardyn Devastator",
["npcID"] = 215844,
},
[459264] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Magnetic Loader",
["npcID"] = 227984,
},
[452877] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Oop'lajax",
["npcID"] = 222319,
},
[3110] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quzmat",
["npcID"] = 416,
},
[440231] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[453773] = {
["source"] = "Nazgrim",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221634,
},
[448791] = {
["isChanneled"] = false,
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206704,
},
[181089] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[450197] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[275563] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Shadowstarved Bullfrog",
["npcID"] = 214406,
},
[430013] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[386195] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Dreadstalker",
["npcID"] = 98035,
},
[444705] = {
["isChanneled"] = false,
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207949,
},
[441256] = {
["source"] = "Underdrip Crawler",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223069,
},
[319383] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aggregate of Doom",
["npcID"] = 165706,
},
[445217] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderbee Worker",
["npcID"] = 215023,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[445218] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Cinderbee Worker",
["npcID"] = 215023,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[451606] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[451734] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Amber Honeyslime",
["npcID"] = 222846,
},
[55078] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[451736] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Amber Honeyslime",
["npcID"] = 222846,
},
[31707] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[196742] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[450205] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Feral Hardhead",
["npcID"] = 225938,
},
[432959] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[456211] = {
["isChanneled"] = false,
["source"] = "Crystal Clacker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215881,
},
[2649] = {
["isChanneled"] = false,
["source"] = "Coldstomp the Griever",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[427596] = {
["isChanneled"] = false,
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206704,
},
[462983] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Automatic Ironstrider",
["npcID"] = 229778,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[427469] = {
["isChanneled"] = false,
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206698,
},
[462856] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nullbot",
["npcID"] = 229729,
},
[198533] = {
["isChanneled"] = false,
["source"] = "Jade Serpent Statue",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60849,
},
[455447] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wayne",
["npcID"] = 226271,
},
[192082] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Wind Rush Totem",
["npcID"] = 97285,
},
[452765] = {
["source"] = "Shadowsilk Wallclimber",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 224844,
},
[447272] = {
["encounterName"] = "Captain Dailcry",
["type"] = "DEBUFF",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2847,
},
[383014] = {
["isChanneled"] = false,
["source"] = "Poison Cleansing Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 5923,
},
[430282] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Fragment",
["npcID"] = 207202,
},
[5320] = {
["source"] = "Sergra Darkthorn",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 3338,
},
[462859] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[449318] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[427473] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[427601] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[427346] = {
["isChanneled"] = false,
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[17735] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kontast",
["npcID"] = 1860,
},
[426964] = {
["isChanneled"] = false,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[24394] = {
["source"] = "Beast",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 62005,
},
[392983] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[444722] = {
["isChanneled"] = false,
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207949,
},
[89751] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arixgorod",
["npcID"] = 17252,
},
[24450] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cat",
["npcID"] = 165189,
},
[388897] = {
["isChanneled"] = false,
["source"] = "Tidal Sandsnapper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224508,
},
[1604] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Disturbed Mudspawn",
["npcID"] = 219897,
},
[3716] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kontast",
["npcID"] = 1860,
},
[374719] = {
["isChanneled"] = false,
["source"] = "Mudstone Basilisk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226700,
},
[331923] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scorched Scavenger",
["npcID"] = 157726,
},
[458268] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sakret'na",
["npcID"] = 215841,
},
[447921] = {
["isChanneled"] = false,
["source"] = "Galvanized Lurker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224779,
},
[427609] = {
["isChanneled"] = false,
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206696,
},
[325665] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Soul Infuser",
["npcID"] = 165762,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[448050] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[389541] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "White Tiger Statue",
["npcID"] = 196581,
},
[435148] = {
["isChanneled"] = false,
["source"] = "Risen Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212835,
},
[444474] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Highlord Darion Mograine",
["npcID"] = 221632,
},
[430805] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Coalescing Void Diffuser",
["npcID"] = 214421,
},
[336398] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Pestering Fiend",
["npcID"] = 168700,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[427484] = {
["isChanneled"] = false,
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206698,
},
[90328] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 165189,
},
[427357] = {
["isChanneled"] = false,
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[446776] = {
["isChanneled"] = false,
["source"] = "War Lynx",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206699,
},
[424420] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211289,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[317877] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stonevigil Collector",
["npcID"] = 158796,
},
[427359] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[424421] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211289,
},
[427360] = {
["isChanneled"] = false,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[452655] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Possibility Projector",
["npcID"] = 224878,
},
[424423] = {
["isChanneled"] = false,
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211291,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[377923] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Risen Magma",
["npcID"] = 225390,
},
[458278] = {
["isChanneled"] = false,
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220285,
},
[451763] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[134477] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arixgorod",
["npcID"] = 17252,
},
[435156] = {
["isChanneled"] = false,
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221760,
},
[445504] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Highlord Darion Mograine",
["npcID"] = 221632,
},
[451764] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[424426] = {
["source"] = "Sergeant Shaynemail",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211291,
},
[430814] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Coalescing Void Diffuser",
["npcID"] = 214421,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2877,
},
[427621] = {
["source"] = "Arathi Knight",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206696,
},
[444740] = {
["isChanneled"] = false,
["source"] = "King Thoras Trollbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221635,
},
[445507] = {
["isChanneled"] = false,
["source"] = "King Thoras Trollbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221635,
},
[444741] = {
["source"] = "King Thoras Trollbane",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221635,
},
[260249] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nikahlas",
["npcID"] = 165189,
},
[1126] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Crenna Earth-Daughter",
["npcID"] = 209072,
},
[424430] = {
["source"] = "Ardent Paladin",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206704,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[444743] = {
["isChanneled"] = false,
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221760,
},
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211290,
},
[455219] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[423665] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "BUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[440912] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lashroom Ambusher",
["npcID"] = 224607,
},
[444490] = {
["source"] = "Ancestor",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221177,
},
[383298] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Enraged Magma Fury",
["npcID"] = 214924,
},
[152175] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[427629] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[443854] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Afflicted Civilian",
["npcID"] = 219066,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Void Chunk",
["npcID"] = 213684,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[422382] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Treant",
["npcID"] = 54983,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2877,
},
[195321] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[450176] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[452013] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[132951] = {
["source"] = "Elise",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[435533] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Glibb",
["npcID"] = 211014,
},
[462892] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[438973] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[424621] = {
["isChanneled"] = false,
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211291,
},
[458256] = {
["isChanneled"] = true,
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220285,
},
[104318] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wild Imp",
["npcID"] = 143622,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[450885] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[452035] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[440921] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lashroom Ambusher",
["npcID"] = 224607,
},
[333600] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Ravenous Thirstlurker",
["npcID"] = 163960,
},
[460595] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Weary Laborer",
["npcID"] = 224759,
},
[451064] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Amber Honeyslime",
["npcID"] = 222846,
},
[435301] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Fungal Infestor",
["npcID"] = 216077,
},
[457913] = {
["source"] = "Deployed Wind-Wrangling Spire",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 227482,
},
[386176] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 17252,
},
[446416] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[458001] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Croakit",
["npcID"] = 214757,
},
[425556] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[444728] = {
["isChanneled"] = false,
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207949,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[16827] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sul'raka",
["npcID"] = 165189,
},
[288774] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[428916] = {
["isChanneled"] = false,
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[415250] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[462898] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[455564] = {
["source"] = "Roth the Earthwound",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226300,
},
[432120] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overlord",
["npcID"] = 228575,
},
[447996] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rustcloud Runt",
["npcID"] = 222796,
},
[325440] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Rockbound Vanquisher",
["npcID"] = 165764,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[461081] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stormrook Tunnel Stalker",
["npcID"] = 228803,
},
[445781] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stolen Loader",
["npcID"] = 223541,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[452169] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[17253] = {
["isChanneled"] = false,
["source"] = "Boar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[450509] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[446549] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Upland Shalehorn",
["npcID"] = 226115,
},
[398643] = {
["source"] = "Opalooze Mollusc",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222040,
},
[440162] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scarlet Stinkcap",
["npcID"] = 212579,
},
[138130] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[444449] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[427260] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursed Rooktender",
["npcID"] = 207199,
},
[113746] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[435165] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[101546] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[5672] = {
["isChanneled"] = false,
["source"] = "Healing Stream Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 3527,
},
[456125] = {
["isChanneled"] = false,
["source"] = "Crystal Clacker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215881,
},
[415253] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[440931] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lashroom Ambusher",
["npcID"] = 224607,
},
[447994] = {
["source"] = "Waste Flayer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221017,
},
[445311] = {
["isChanneled"] = false,
["source"] = "Shallowshell the Clacker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219278,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[100780] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[428866] = {
["source"] = "Treant",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 54983,
},
[390599] = {
["isChanneled"] = false,
["source"] = "Child of Ohn'ahra",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 191869,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[447926] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Galvanized Lurker",
["npcID"] = 224779,
},
[457924] = {
["source"] = "Deployed Recovery Keg",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 227490,
},
[429099] = {
["source"] = "Fervent Sharpshooter",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206694,
},
[419344] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[457797] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Deployed Battle Supplies",
["npcID"] = 227453,
},
[398553] = {
["isChanneled"] = false,
["source"] = "Disturbed Krolusk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229813,
},
[450899] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[424966] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2861,
},
[166302] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blingtron 5000",
["npcID"] = 77789,
},
[112042] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kontast",
["npcID"] = 1860,
},
[398497] = {
["isChanneled"] = false,
["source"] = "Stormtop Shalemaw",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212364,
},
[443363] = {
["isChanneled"] = false,
["source"] = "Riled Sandtwister",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225900,
},
[108446] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unknown",
["npcID"] = 417,
},
[334208] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Argent Healer",
["npcID"] = 171501,
},
[446424] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Persistent Honeyslime",
["npcID"] = 222843,
},
[453073] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[453101] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Honey Ooze",
["npcID"] = 225247,
},
[427356] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[267964] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arixgorod",
["npcID"] = 17252,
},
[201754] = {
["isChanneled"] = false,
["source"] = "Coldstomp the Griever",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[428150] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[326075] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Soul Infuser",
["npcID"] = 165762,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[453458] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[381535] = {
["isChanneled"] = false,
["source"] = "Riled Dirtdiver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225905,
},
[423682] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[427896] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightshade Ambusher",
["npcID"] = 224278,
},
[127801] = {
["isChanneled"] = false,
["source"] = "Turnip Punching Bag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 65310,
},
[459457] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nerubian Saboteur",
["npcID"] = 228057,
},
[329565] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Vile Occultist",
["npcID"] = 165763,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[433403] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[360969] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nikahlas",
["npcID"] = 165189,
},
[424462] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211289,
},
[431639] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Saboteur",
["npcID"] = 212715,
},
[33907] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 142294,
},
[453461] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[116847] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[431744] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[433411] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[440687] = {
["source"] = "Royal Jelly Purveyor",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220141,
},
[433410] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chittering Fearmonger",
["npcID"] = 216583,
},
[427894] = {
["isChanneled"] = false,
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212831,
},
[457423] = {
["isChanneled"] = false,
["source"] = "Riled Sandtwister",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225900,
},
[427402] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursed Rookguard",
["npcID"] = 207197,
},
[458228] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sakret'na",
["npcID"] = 215841,
},
[100784] = {
["isChanneled"] = false,
["source"] = "Fire Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69791,
},
[455380] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Railbot",
["npcID"] = 218251,
},
[460618] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overworked Cook",
["npcID"] = 220744,
},
[456147] = {
["isChanneled"] = false,
["source"] = "Bandtail Kestrel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220300,
},
[228649] = {
["isChanneled"] = false,
["source"] = "Fire Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69791,
},
[332871] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "High Torturer Darithos",
["npcID"] = 168973,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[427404] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[59638] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mirror Image",
["npcID"] = 31216,
},
[444909] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spreading Sporbit",
["npcID"] = 220304,
},
[445559] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[205231] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkglare",
["npcID"] = 103673,
},
[458193] = {
["isChanneled"] = true,
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220285,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[449251] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Threadmancer",
["npcID"] = 208244,
},
[440181] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rustul Titancap",
["npcID"] = 213115,
},
[448485] = {
["isChanneled"] = false,
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212826,
},
[1459] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Meredy Huntswell",
["npcID"] = 209059,
},
[54049] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thoozhem",
["npcID"] = 417,
},
[419871] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[176458] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Blacksmithing Follower - Horde",
["npcID"] = 88402,
},
[450786] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[458068] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Croakit",
["npcID"] = 214757,
},
[432135] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waterworks Opportunist",
["npcID"] = 222867,
},
[427616] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[452042] = {
["source"] = "Arcane Phoenix",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223453,
},
[432113] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overlord",
["npcID"] = 228575,
},
[464917] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Weave-Rat",
["npcID"] = 230889,
},
[442995] = {
["source"] = "Venture Co. Honey Harvester",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220946,
},
[463052] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[445806] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waxen Bones",
["npcID"] = 229808,
},
[451044] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Amber Honeyslime",
["npcID"] = 222846,
},
[107428] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[424429] = {
["isChanneled"] = false,
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206704,
},
[452195] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Cyclonecrier Alpha",
["npcID"] = 222959,
},
[113656] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fire Spirit",
["npcID"] = 69791,
},
[415403] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lurker of the Deeps",
["npcID"] = 220285,
},
[457993] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Croakit",
["npcID"] = 214757,
},
[430812] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Coalescing Void Diffuser",
["npcID"] = 214421,
},
[42648] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Rotting Deathwalker",
["npcID"] = 168855,
},
[425113] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[457434] = {
["isChanneled"] = false,
["source"] = "Riled Dirtdiver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225905,
},
[343737] = {
["source"] = "Yu'lon",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165374,
},
[448492] = {
["isChanneled"] = false,
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212826,
},
[462802] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Machinist",
["npcID"] = 229695,
},
[330593] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Fearspinner",
["npcID"] = 168724,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[259277] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Nikahlas",
["npcID"] = 165189,
},
[334713] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dreadstalker",
["npcID"] = 98035,
},
[432569] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mother of Chaos",
["npcID"] = 228576,
},
[445811] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Waxen Bones",
["npcID"] = 229808,
},
[432142] = {
["isChanneled"] = false,
["source"] = "Nerubian Ambusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216247,
},
[432781] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Radiating Voidstone",
["npcID"] = 212739,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[423839] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[385023] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Stillpond Tidewader",
["npcID"] = 214835,
},
[263840] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Liuliuha",
["npcID"] = 165189,
},
[391385] = {
["isChanneled"] = false,
["source"] = "Enraged Magma Fury",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214924,
},
[440185] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rustul Titancap",
["npcID"] = 213115,
},
[446261] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Emboldened Fog Wither",
["npcID"] = 219909,
},
[444985] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pupating Stinger",
["npcID"] = 216288,
},
[384366] = {
["isChanneled"] = false,
["source"] = "Ashwhite Kestrel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215070,
},
[427024] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Glower Swarm",
["npcID"] = 224595,
},
[89753] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arixgorod",
["npcID"] = 17252,
},
[261616] = {
["isChanneled"] = false,
["source"] = "Katy Stampwhistle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 132969,
},
[325590] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Vile Occultist",
["npcID"] = 165763,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[328285] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scorched Scavenger",
["npcID"] = 157731,
},
[447987] = {
["source"] = "Waste Flayer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221017,
},
[436072] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nerubian Webspinner",
["npcID"] = 212717,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[458080] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Croakit",
["npcID"] = 214757,
},
[426893] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[423588] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[439538] = {
["source"] = "Mechanized Enforcer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214826,
},
[325442] = {
["encounterName"] = "Sun King's Salvation",
["type"] = "DEBUFF",
["source"] = "Rockbound Vanquisher",
["npcID"] = 165764,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2402,
},
[449522] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dreadstrike Defender",
["npcID"] = 217916,
},
[462936] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Medbot",
["npcID"] = 229769,
},
[424739] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2861,
},
[432035] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[61684] = {
["isChanneled"] = false,
["source"] = "Boar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2877,
},
[432638] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[445251] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Brushmane Wolf",
["npcID"] = 217561,
},
[450546] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[439432] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Maintenance Machine",
["npcID"] = 219587,
},
[320592] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Ravenous Swarm",
["npcID"] = 160613,
},
[19483] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infernal",
["npcID"] = 89,
},
[450628] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[394976] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Void Lasher",
["npcID"] = 198757,
},
[427323] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[398394] = {
["isChanneled"] = false,
["source"] = "Disturbed Krolusk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229813,
},
[450037] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Spire",
["npcID"] = 220068,
},
[427635] = {
["isChanneled"] = false,
["source"] = "War Lynx",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206699,
},
[224125] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100820,
},
[458086] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Croakit",
["npcID"] = 214757,
},
[430109] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursed Thunderer",
["npcID"] = 207198,
},
[444034] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[430179] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[427342] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[444418] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[430238] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Fragment",
["npcID"] = 207202,
},
[224126] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100820,
},
[415251] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[423979] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Cursed Crusher",
["npcID"] = 214419,
},
[447443] = {
["encounterName"] = "Captain Dailcry",
["type"] = "DEBUFF",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207946,
},
[181113] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Rockbound Vanquisher",
["npcID"] = 165764,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2402,
},
[456438] = {
["source"] = "Cursed Miner",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 213565,
},
[430288] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Fragment",
["npcID"] = 207202,
},
[330595] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Fearspinner",
["npcID"] = 168724,
},
[224127] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 212489,
},
[452469] = {
["source"] = "Brightstone",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 224764,
},
[429091] = {
["isChanneled"] = false,
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212827,
},
[115098] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[445262] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[429028] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Awakened",
["npcID"] = 213741,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[429029] = {
["encounterName"] = "Skardyn Monstrosity",
["type"] = "BUFF",
["source"] = "Voidstone Awakened",
["npcID"] = 213741,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2836,
},
[373521] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Mudstone Basilisk",
["npcID"] = 226700,
},
[447412] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Bloodmaw",
["npcID"] = 219264,
},
[440207] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
},
[456212] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Webbed Ore Deposit",
["npcID"] = 226716,
},
[430754] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[427325] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[444296] = {
["isChanneled"] = false,
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206696,
},
[335581] = {
["encounterName"] = "Sun King's Salvation",
["type"] = "BUFF",
["source"] = "Vile Occultist",
["npcID"] = 165763,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2402,
},
[422351] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gnarled Lasher",
["npcID"] = 207740,
},
},
["profileKeys"] = {
["Unhaltedk - Twisting Nether"] = "Default",
["Unhaltedormu - Twisting Nether"] = "Default",
["Unusual - Twisting Nether"] = "Default",
["Unhalted - Twisting Nether"] = "Default",
["Uncharged - Twisting Nether"] = "Default",
["Unsanctify - Twisting Nether"] = "Default",
["Unhaltedx - Twisting Nether"] = "Default",
["Uncool - Twisting Nether"] = "Default",
["Uninterested - Twisting Nether"] = "Default",
["Unsalted - Twisting Nether"] = "Default",
},
["profiles"] = {
["Default"] = {
["focus_as_target_alpha"] = true,
["aura_breakline_space"] = 1,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Time"] = 1725060121,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Icon"] = 135964,
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 112,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["Desc"] = "",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["version"] = 8,
["Prio"] = 99,
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["PlaterCore"] = 1,
["Name"] = "Invalid Target",
["semver"] = "1.0.7",
["Enabled"] = true,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend",
["OnHideCode"] = "function(script)\n    function script.hide(unitFrame)\n    end\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["Time"] = 1725060196,
["url"] = "https://wago.io/lZriat47W/2",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend",
["Icon"] = "135945",
["NpcNames"] = {
"Spiteful Shade",
},
["Temp_OnHideCode"] = "function(script)\n    function script.hide(unitFrame)\n    end\nend",
["Revision"] = 100,
["semver"] = "1.1.0",
["Desc"] = "Changes the name of the Spiteful Shade to its target with class color.",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["Author"] = "Stivn-Ravencrest",
["Initialization"] = "function(script)\n    local C_ClassColor, UnitExists, UnitClass, UnitName = C_ClassColor, UnitExists, UnitClass, UnitName\n    local WrapTextInColorCode = WrapTextInColorCode\n    local nameDefaultColorHex = nil\n    \n    local function updateName(unitFrame)\n        local targetName = UnitName(unitFrame.namePlateUnitToken..\"target\")\n        if targetName then\n            local classColor = C_ClassColor.GetClassColor(select(2, UnitClass(unitFrame.namePlateUnitToken..\"target\")))\n            unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(targetName, classColor:GenerateHexColor()))\n        end\n    end\n    \n    function script.update(unitFrame)\n        updateName(unitFrame)\n    end\nend",
["OnShowCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["version"] = 2,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Spiteful Class Colour",
["Temp_Initialization"] = "function(script)\n    local C_ClassColor, UnitExists, UnitClass, UnitName = C_ClassColor, UnitExists, UnitClass, UnitName\n    local WrapTextInColorCode = WrapTextInColorCode\n    local nameDefaultColorHex = nil\n    \n    local function updateName(unitFrame)\n        local targetName = UnitName(unitFrame.namePlateUnitToken..\"target\")\n        if targetName then\n            local classColor = C_ClassColor.GetClassColor(select(2, UnitClass(unitFrame.namePlateUnitToken..\"target\")))\n            unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(targetName, classColor:GenerateHexColor()))\n        end\n    end\n    \n    function script.update(unitFrame)\n        updateName(unitFrame)\n    end\nend",
["Options"] = {
},
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1725060119,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 159,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"214840",
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725060121,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["Icon"] = 610472,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 84,
["semver"] = "",
["Enabled"] = true,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Name"] = "Aura is Shield [P]",
["Options"] = {
},
["NpcNames"] = {
},
},
},
["npcs_renamed"] = {
[114627] = "Terror",
[184319] = "Custodian",
[190340] = "Defender",
},
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplatePlayerMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOverlapH"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater.lua:1581",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:1581",
},
["aura_cache_by_name"] = {
},
["blizzard_nameplate_font_override_enabled"] = true,
["indicator_raidmark_scale"] = 0.99999994039536,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["indicator_quest"] = false,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["color_override_colors"] = {
[3] = {
1,
0.25098040699959,
0.25098040699959,
},
[4] = {
1,
1,
0.25098040699959,
},
[5] = {
0.25098040699959,
1,
0.25098040699959,
},
},
["npc_cache"] = {
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[165469] = {
"Nathrian Enforcer",
"Castle Nathria",
"enUS",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[213806] = {
"Splotch",
"Throne of the Tides",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[165470] = {
"Nathrian Executor",
"Castle Nathria",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[173015] = {
"Nathrian Heavy Enforcer",
"Castle Nathria",
"enUS",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[120651] = {
"Explosives",
"Shrine of the Storm",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[165474] = {
"Nathrian Assassin",
"Castle Nathria",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[165481] = {
"Court Assassin",
"Castle Nathria",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[173798] = {
"Rat of Unusual Size",
"Castle Nathria",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
},
[219066] = {
"Afflicted Civilian",
"The Rookery",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[173802] = {
"Carved Assistant",
"Castle Nathria",
"enUS",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
"enUS",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[166644] = {
"Artificer Xy'mox",
"Castle Nathria",
"enUS",
},
[213830] = {
"Candleclaw Kobold",
"New Candle, New Hope",
"enUS",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[169458] = {
"Hecutis",
"Castle Nathria",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[213831] = {
"Candleclaw Underboss",
"New Candle, New Hope",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[123476] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[122773] = {
"Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[218693] = {
"Eclipsing Grasp",
"11.0 - Priory Scenario",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[213834] = {
"Candleclaw Mole",
"New Candle, New Hope",
"enUS",
},
[123477] = {
"Antoran Doomguard",
"Antorus, the Burning Throne",
"enUS",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[217799] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[213835] = {
"Candleclaw Scrambler",
"New Candle, New Hope",
"enUS",
},
[174194] = {
"Court Executor",
"Castle Nathria",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[123480] = {
"Antoran Champion",
"Antorus, the Burning Throne",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[81985] = {
"Everbloom Tender",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[122778] = {
"Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Earthcrawl Mines",
"enUS",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[217299] = {
"Ostiary Wystan",
"Hall of Awakening",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[173568] = {
"Anima Crazed Worker",
"Castle Nathria",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[173444] = {
"Caramain",
"Castle Nathria",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[123680] = {
"Dark Keeper Aedis",
"Antorus, the Burning Throne",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[168973] = {
"High Torturer Darithos",
"Castle Nathria",
"enUS",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[165521] = {
"Lady Inerva Darkvein",
"Castle Nathria",
"enUS",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[174090] = {
"Nathrian Hierarch",
"Castle Nathria",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[174093] = {
"Nathrian Ranger",
"Castle Nathria",
"enUS",
},
[219361] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[228952] = {
"Nerubian Skulker",
"Earthcrawl Mines",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228953] = {
"Skittering Intruder",
"Earthcrawl Mines",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[85194] = {
"Entanglement",
"The Everbloom",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[208241] = {
"Ankle Biter",
"Earthcrawl Mines",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
},
[174100] = {
"Nathrian Singuard",
"Castle Nathria",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[208243] = {
"Nerubian Slasher",
"Earthcrawl Mines",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[173973] = {
"Nathrian Tracker",
"Castle Nathria",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[213743] = {
"Enraged Skardyn",
"Hall of Awakening",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[213873] = {
"Waxy Globule",
"New Candle, New Hope",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[214368] = {
"The Broken Queen",
"11.0 - Priory Scenario",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
},
[173466] = {
"Fara",
"Castle Nathria",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[226620] = {
"Rat",
"Earthcrawl Mines",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
},
[214382] = {
"Whispering Monstrosity",
"11.0 - Priory Scenario",
"enUS",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[223541] = {
"Stolen Loader",
"Earthcrawl Mines",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[207482] = {
"Invasive Sporecap",
"Earthcrawl Mines",
"enUS",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[167566] = {
"Bleakwing Assassin",
"Castle Nathria",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[164261] = {
"Hungering Destroyer",
"Castle Nathria",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[173469] = {
"Kullan",
"Castle Nathria",
"enUS",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[165472] = {
"Nathrian Siphoner",
"Castle Nathria",
"enUS",
},
[169457] = {
"Bargast",
"Castle Nathria",
"enUS",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[173145] = {
"Gorging Mite",
"Castle Nathria",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[210810] = {
"Menial Laborer",
"Khaz Algar",
"enUS",
},
[174336] = {
"Kennel Overseer",
"Castle Nathria",
"enUS",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[174092] = {
"Nathrian Gargon Rider",
"Castle Nathria",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[174070] = {
"Kennel Overseer",
"Castle Nathria",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[173445] = {
"Sindrel",
"Castle Nathria",
"enUS",
},
[173949] = {
"Nathrian Soldier",
"Castle Nathria",
"enUS",
},
[173953] = {
"Loyal Gargon",
"Castle Nathria",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[168337] = {
"Moldovaak",
"Castle Nathria",
"enUS",
},
[208239] = {
"Skittering Menace",
"Earthcrawl Mines",
"enUS",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[128095] = {
"Sister of the Lash",
"Antorus, the Burning Throne",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Earthcrawl Mines",
"enUS",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[173446] = {
"Hargitas",
"Castle Nathria",
"enUS",
},
[84499] = {
"Entanglement",
"The Everbloom",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[229739] = {
"Malfunctioning Pylon",
"Awakening The Machine",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[213828] = {
"Candleclaw Pyromancer",
"New Candle, New Hope",
"enUS",
},
[213883] = {
"Dripear the Waxy",
"New Candle, New Hope",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[226460] = {
"Undercrawler Hatchling",
"Earthcrawl Mines",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[226484] = {
"Larva",
"Earthcrawl Mines",
"enUS",
},
[174842] = {
"Belligerent Waiter",
"Castle Nathria",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[123478] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[217684] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[173604] = {
"Sinister Antiquarian",
"Castle Nathria",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[217435] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[213833] = {
"Candleclaw Knight",
"New Candle, New Hope",
"enUS",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
},
[126764] = {
"Bladesworn Ravager",
"Antorus, the Burning Throne",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[173609] = {
"Nathrian Conservator",
"Castle Nathria",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
"enUS",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"Earthcrawl Mines",
"enUS",
},
[218527] = {
"Shadesworn Crusher",
"11.0 - Priory Scenario",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[164406] = {
"Shriekwing",
"Castle Nathria",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[204560] = {
"Incorporeal Being",
"Halls of Infusion",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Tazavesh, the Veiled Market",
},
[115388] = {
"King",
"Return to Karazhan",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[216583] = {
"Chittering Fearmonger",
"Earthcrawl Mines",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[215177] = {
"Waximus",
"New Candle, New Hope",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[216584] = {
"Nerubian Captain",
"Earthcrawl Mines",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[121975] = {
"Aggramar",
"Antorus, the Burning Throne",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[217353] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[217610] = {
"Deviant Skardyn",
"Hall of Awakening",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[174773] = {
"Spiteful Shade",
"Halls of Atonement",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[219148] = {
"Skardyn Metamorphosis",
"Hall of Awakening",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[219149] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[218511] = {
"Forming Whispers",
"11.0 - Priory Scenario",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[165067] = {
"Margore",
"Castle Nathria",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[174012] = {
"Executrix Ophelia",
"Castle Nathria",
"enUS",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[229769] = {
"Medbot",
"Awakening The Machine",
"enUS",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[190128] = {
"Zul'gamux",
"Tazavesh, the Veiled Market",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[169157] = {
"Mudlump",
"Castle Nathria",
"enUS",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[173633] = {
"Nathrian Archivist",
"Castle Nathria",
"enUS",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[165066] = {
"Huntsman Altimor",
"Castle Nathria",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[218520] = {
"Nightcaller Velys",
"11.0 - Priory Scenario",
"enUS",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[218521] = {
"Hazzk the Ascended",
"11.0 - Priory Scenario",
"enUS",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[189878] = {
"Nathrezim Infiltrator",
"Return to Karazhan",
},
[217225] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[216221] = {
"Earthen-Ward Sentinel",
"Hall of Awakening",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[214576] = {
"Iron-Runed Protector",
"Hall of Awakening",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[128060] = {
"Priestess of Delirium",
"Antorus, the Burning Throne",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
},
[229778] = {
"Automatic Ironstrider",
"Awakening The Machine",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
"enUS",
},
[219874] = {
"High Speaker's Construct",
"Hall of Awakening",
"enUS",
},
[173613] = {
"Nathrian Registrar",
"Castle Nathria",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[220029] = {
"Gearsweep",
"Hall of Awakening",
"enUS",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[216487] = {
"Skardyn Remnants",
"Hall of Awakening",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
"enUS",
},
[229729] = {
"Nullbot",
"Awakening The Machine",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[229782] = {
"Awakened Phalanx",
"Awakening The Machine",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
},
[173800] = {
"Sewer Rat",
"Castle Nathria",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[214381] = {
"Writhing Shade",
"11.0 - Priory Scenario",
"enUS",
},
[165764] = {
"Rockbound Vanquisher",
"Castle Nathria",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[123402] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[214379] = {
"Living Shadow",
"11.0 - Priory Scenario",
"enUS",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
"enUS",
},
[122450] = {
"Garothi Worldbreaker",
"Antorus, the Burning Throne",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[123532] = {
"Dark Keeper",
"Antorus, the Burning Throne",
"enUS",
},
[123533] = {
"Tarneth",
"Antorus, the Burning Throne",
"enUS",
},
[216155] = {
"Skittering Ambusher",
"Earthcrawl Mines",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[122532] = {
"Ember of Taeshalach",
"Antorus, the Burning Throne",
"enUS",
},
[124828] = {
"Argus the Unmaker",
"Antorus, the Burning Throne",
"enUS",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[217672] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[127233] = {
"Flameweaver",
"Antorus, the Burning Throne",
"enUS",
},
[174338] = {
"Stinky Feedhauler",
"Castle Nathria",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[213829] = {
"Candleclaw Soilseer",
"New Candle, New Hope",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[174069] = {
"Hulking Gargon",
"Castle Nathria",
"enUS",
},
[174071] = {
"Vicious Gargon",
"Castle Nathria",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[173146] = {
"Winged Ravager",
"Castle Nathria",
"enUS",
},
[173448] = {
"Dragost",
"Castle Nathria",
"enUS",
},
[173142] = {
"Dread Feaster",
"Castle Nathria",
"enUS",
},
[174162] = {
"Countess Gloomveil",
"Castle Nathria",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[173464] = {
"Deplina",
"Castle Nathria",
"enUS",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[174208] = {
"Court Executor",
"Castle Nathria",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[168700] = {
"Pestering Fiend",
"Castle Nathria",
"enUS",
},
[123398] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[228951] = {
"Nerubian Stalker",
"Earthcrawl Mines",
"enUS",
},
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["health_selection_overlay_alpha"] = 0,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["aura_stack_size"] = 12,
["aura_height2"] = 28,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_anchor"] = {
["x"] = 16.099998474121,
["side"] = 2,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.5,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["extra_icon_height"] = 30,
["transparency_behavior"] = 2,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_texture"] = "Blizzard Raid Bar",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Execute Range"] = 1,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Extra Border"] = 2,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
},
["minor_width_scale"] = 0.99999994039536,
["castbar_target_text_size"] = 12,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["aura_timer_text_font"] = "Friz Quadrata TT",
["cast_statusbar_color_finished"] = {
0.63529413938522,
0.73725491762161,
0.91764712333679,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["aura_height"] = 28,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Blizzard Raid Bar",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["extra_icon_stack_size"] = 12,
["saved_cvars"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowOnlyNames"] = "0",
["nameplateMotion"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateSelectedAlpha"] = "1",
["nameplateOverlapV"] = "1.6000000238419",
},
["login_counter"] = 6759,
["extra_icon_caster_name"] = false,
["bossmod_aura_height"] = 24,
["aura_stack_font"] = "Friz Quadrata TT",
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
["level_text_alpha"] = 0.3,
},
["friendlyplayer"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["level_text_alpha"] = 0.3,
["percent_text_size"] = 12,
["spellpercent_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["spellname_text_size"] = 12,
["spellpercent_text_enabled"] = true,
["quest_color_enabled"] = true,
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["mana"] = {
nil,
4,
},
["percent_text_enabled"] = true,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["spellname_text_font"] = "Friz Quadrata TT",
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["spellpercent_text_size"] = 12,
["percent_text_enabled"] = true,
["castbar_offset"] = -1,
["level_text_alpha"] = 0.3,
["spellpercent_text_enabled"] = true,
["level_text_outline"] = "OUTLINE",
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["percent_text_size"] = 12,
["spellname_text_size"] = 12,
},
["global_health_height"] = 28,
["global_health_width"] = 224,
["enemyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["castbar_offset"] = -1,
["level_text_alpha"] = 0.3,
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["percent_show_health"] = false,
["quest_color_enabled"] = true,
["spellname_text_size"] = 12,
["health"] = {
224,
28,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["percent_text_size"] = 12,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["spellname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_alpha"] = 0.3,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["focus_texture"] = "Details! Slash",
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["bossmod_aura_width"] = 24,
["border_thickness"] = 0.49999997019768,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B290529"] = "Chi",
},
},
["spell_animation_list"] = {
[27285] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["cooldown"] = 0.75,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["scale_downX"] = 0.9,
["enabled"] = true,
},
},
[188443] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["duration"] = 0.2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[46968] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["duration"] = 0.1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["absolute_sineX"] = false,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.1,
["frequency"] = 120,
},
},
[275779] = {
["1"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["duration"] = 0.12,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["absolute_sineX"] = false,
["amplitude"] = 1,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[11366] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["cooldown"] = 0.75,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["scale_downX"] = 0.8,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.09,
["duration"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[228354] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["duration"] = 0.12,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["absolute_sineX"] = false,
["amplitude"] = 1,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[32645] = {
["1"] = {
["scale_upY"] = 1.1999999284744,
["scale_upX"] = 1.1000000238419,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["scale_downX"] = 0.89999997615814,
["animation_type"] = "scale",
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["duration"] = 0.12000000476837,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["absolute_sineX"] = false,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
},
[189112] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.34999999403954,
["duration"] = 0.40000000596046,
["absolute_sineX"] = true,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
},
[187874] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["duration"] = 0.2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 100,
},
},
[185763] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.25999999046326,
["duration"] = 0.15999999642372,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["2"] = {
["scale_upY"] = 1.0299999713898,
["scale_upX"] = 1.0299999713898,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["scale_downX"] = 0.96999996900559,
["animation_type"] = "scale",
},
},
[31661] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["duration"] = 0.1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[203782] = {
["1"] = {
["scaleY"] = -1,
["fade_out"] = 0.089999996125698,
["duration"] = 0.099999994039536,
["absolute_sineX"] = true,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["amplitude"] = 1.5,
["critical_scale"] = 1.05,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[100784] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.09,
["duration"] = 0.099999994039536,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[31935] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["cooldown"] = 0.75,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["scale_downX"] = 0.97,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.09,
["duration"] = 0.1,
["absolute_sineX"] = true,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[53351] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 0.97999995946884,
["scale_upY"] = 1,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["duration"] = 0.050000000745058,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["absolute_sineX"] = false,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[257045] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["duration"] = 0.1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[107270] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.089999996125698,
["duration"] = 0.1499999910593,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 200,
},
},
[17364] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["scale_downX"] = 0.97,
["scale_upY"] = 1.02,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["duration"] = 0.1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["absolute_sineX"] = false,
["amplitude"] = 2.5,
["fade_in"] = 0,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[49998] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.019999999552965,
["duration"] = 0.050000000745058,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["absolute_sineX"] = false,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[7268] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["duration"] = 0.1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[206930] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 0.97999995946884,
["scale_upY"] = 1,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["duration"] = 0.050000000745058,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["absolute_sineX"] = false,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[196278] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["duration"] = 0.05,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[162243] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.089999996125698,
["duration"] = 0.099999994039535,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["amplitude"] = 1,
["critical_scale"] = 1.05,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[196819] = {
["1"] = {
["scale_upY"] = 1.2999999523163,
["scale_upX"] = 1.1999999284744,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["scale_downX"] = 0.89999997615814,
["animation_type"] = "scale",
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["duration"] = 0.21999999880791,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["absolute_sineX"] = false,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
},
[264178] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["duration"] = 0.12,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[199804] = {
["1"] = {
["scaleY"] = 0.88999938964844,
["fade_out"] = 0.09,
["duration"] = 0.19999998807907,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0499999523163,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["scale_upY"] = 1.0499999523163,
},
},
[187708] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["duration"] = 0.2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[185438] = {
["1"] = {
["scaleY"] = -1,
["fade_out"] = 0.19999998807907,
["duration"] = 0.099999994039536,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["amplitude"] = 6.460000038147,
["critical_scale"] = 1.05,
["fade_in"] = 0,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["scale_downX"] = 0.96999996900559,
["scale_upY"] = 1.0299999713898,
},
},
[86040] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["duration"] = 0.15,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["absolute_sineX"] = false,
["amplitude"] = 2,
["fade_in"] = 0.05,
["enabled"] = true,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[52174] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["cooldown"] = 0.75,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["scale_downX"] = 0.8,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.2,
["duration"] = 0.3,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 50,
},
},
[2643] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["duration"] = 0.2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[324540] = {
["1"] = {
["scaleY"] = 2,
["fade_out"] = 0.089999996125698,
["duration"] = 0.1499999910593,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["scale_downX"] = 0.96999996900558,
["scale_upY"] = 1.0299999713898,
},
},
[53595] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["cooldown"] = 0.75,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["scale_downX"] = 0.97,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.09,
["duration"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[108853] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["duration"] = 0.12,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["absolute_sineX"] = false,
["amplitude"] = 1,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[204157] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.089999996125698,
["duration"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["amplitude"] = 6,
["critical_scale"] = 1.05,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["cooldown"] = 0.75,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["scale_downX"] = 0.97,
["animation_type"] = "scale",
},
},
[117418] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["duration"] = 0.1799999922514,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
},
[148135] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.09,
["duration"] = 0.099999994039536,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
},
[228478] = {
["1"] = {
["scaleY"] = 0.79999923706055,
["fade_out"] = 0.099999994039536,
["duration"] = 0.099999994039535,
["absolute_sineX"] = true,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["amplitude"] = 2.5,
["critical_scale"] = 1.05,
["fade_in"] = 0,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["cooldown"] = 0.75,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["scale_downX"] = 0.96999996900559,
["animation_type"] = "scale",
},
},
[199547] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.089999996125698,
["duration"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["scale_downX"] = 0.96999996900558,
["scale_upY"] = 1.039999961853,
},
},
[222024] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.019999999552965,
["duration"] = 0.050000000745058,
["absolute_sineX"] = true,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["amplitude"] = 1.7999999523163,
["critical_scale"] = 1,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
},
[155166] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["duration"] = 0.2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["absolute_sineX"] = false,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["enabled"] = true,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[8042] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["enabled"] = true,
["cooldown"] = 0.75,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["scale_downX"] = 0.95,
["scale_upY"] = 1.05,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["duration"] = 0.06,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["absolute_sineX"] = false,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["enabled"] = true,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
},
["indicator_scale"] = 1.2000000476837,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
1,
},
["npc_colors"] = {
[99358] = {
true,
false,
"paleturquoise",
},
[198716] = {
true,
false,
"peachpuff",
},
[196798] = {
true,
false,
"snow",
},
[186696] = {
true,
false,
"paleturquoise",
},
[194241] = {
true,
false,
"peachpuff",
},
[213806] = {
true,
false,
"snow",
},
[207796] = {
true,
false,
"paleturquoise",
},
[95842] = {
true,
false,
"snow",
},
[180431] = {
true,
false,
"snow",
},
[115407] = {
true,
false,
"peachpuff",
},
[184140] = {
true,
false,
"paleturquoise",
},
[168156] = {
true,
false,
"paleturquoise",
},
[165471] = {
true,
false,
"peachpuff",
},
[173016] = {
true,
false,
"snow",
},
[180433] = {
true,
false,
"paleturquoise",
},
[200126] = {
true,
false,
"peachpuff",
},
[120651] = {
true,
false,
"gold",
},
[197697] = {
true,
false,
"paleturquoise",
},
[176598] = {
true,
false,
"peachpuff",
},
[164578] = {
true,
false,
"peachpuff",
},
[197698] = {
true,
false,
"paleturquoise",
},
[175576] = {
true,
false,
"paleturquoise",
},
[126918] = {
true,
false,
"peachpuff",
},
[196548] = {
true,
false,
"snow",
},
[135552] = {
true,
false,
"peachpuff",
},
[193352] = {
true,
false,
"peachpuff",
},
[135169] = {
true,
false,
"paleturquoise",
},
[206140] = {
true,
false,
"paleturquoise",
},
[126919] = {
true,
false,
"snow",
},
[127111] = {
true,
false,
"peachpuff",
},
[168418] = {
true,
false,
"snow",
},
[199748] = {
true,
false,
"snow",
},
[165222] = {
true,
false,
"peachpuff",
},
[198214] = {
true,
false,
"paleturquoise",
},
[168420] = {
true,
false,
"peachpuff",
},
[83763] = {
true,
false,
"snow",
},
[184022] = {
true,
false,
"snow",
},
[189265] = {
true,
false,
"peachpuff",
},
[75899] = {
true,
false,
"paleturquoise",
},
[199368] = {
true,
false,
"paleturquoise",
},
[178141] = {
true,
false,
"peachpuff",
},
[196044] = {
true,
false,
"paleturquoise",
},
[83892] = {
true,
false,
"snow",
},
[178142] = {
true,
false,
"snow",
},
[98406] = {
true,
false,
"paleturquoise",
},
[194894] = {
true,
false,
"peachpuff",
},
[196045] = {
true,
false,
"snow",
},
[165483] = {
true,
false,
"paleturquoise",
},
[194895] = {
true,
false,
"snow",
},
[168425] = {
true,
false,
"paleturquoise",
},
[164461] = {
true,
false,
"peachpuff",
},
[83893] = {
true,
false,
"peachpuff",
},
[99366] = {
true,
false,
"peachpuff",
},
[177889] = {
true,
false,
"paleturquoise",
},
[187224] = {
true,
false,
"peachpuff",
},
[211904] = {
true,
false,
"paleturquoise",
},
[134284] = {
true,
false,
"snow",
},
[194897] = {
true,
false,
"paleturquoise",
},
[164463] = {
true,
false,
"snow",
},
[98280] = {
true,
false,
"snow",
},
[205384] = {
true,
false,
"snow",
},
[212673] = {
true,
false,
"paleturquoise",
},
[172265] = {
true,
false,
"snow",
},
[150143] = {
true,
false,
"peachpuff",
},
[177892] = {
true,
false,
"peachpuff",
},
[214209] = {
true,
false,
"snow",
},
[168942] = {
true,
false,
"peachpuff",
},
[114266] = {
true,
false,
"snow",
},
[190426] = {
true,
false,
"paleturquoise",
},
[189531] = {
true,
false,
"peachpuff",
},
[98538] = {
true,
false,
"paleturquoise",
},
[150146] = {
true,
false,
"paleturquoise",
},
[137103] = {
true,
false,
"paleturquoise",
},
[101991] = {
true,
false,
"peachpuff",
},
[162039] = {
true,
false,
"snow",
},
[156157] = {
true,
false,
"peachpuff",
},
[75713] = {
true,
false,
"snow",
},
[180070] = {
true,
false,
"paleturquoise",
},
[198868] = {
true,
false,
"snow",
},
[199124] = {
true,
false,
"snow",
},
[208459] = {
true,
false,
"snow",
},
[52019] = {
true,
false,
"paleturquoise",
},
[198869] = {
true,
false,
"snow",
},
[171376] = {
true,
false,
"peachpuff",
},
[97197] = {
true,
false,
"snow",
},
[203857] = {
true,
false,
"snow",
},
[198870] = {
true,
false,
"peachpuff",
},
[75459] = {
true,
false,
"snow",
},
[118489] = {
true,
false,
"paleturquoise",
},
[170483] = {
true,
false,
"paleturquoise",
},
[193373] = {
true,
false,
"paleturquoise",
},
[168310] = {
true,
false,
"paleturquoise",
},
[133912] = {
true,
false,
"peachpuff",
},
[75652] = {
true,
false,
"paleturquoise",
},
[155908] = {
true,
false,
"paleturquoise",
},
[179821] = {
true,
false,
"paleturquoise",
},
[157571] = {
true,
false,
"snow",
},
[173044] = {
true,
false,
"snow",
},
[154758] = {
true,
false,
"paleturquoise",
},
[118491] = {
true,
false,
"snow",
},
[90998] = {
true,
false,
"peachpuff",
},
[157572] = {
true,
false,
"snow",
},
[164861] = {
true,
false,
"peachpuff",
},
[114783] = {
true,
false,
"snow",
},
[105704] = {
true,
false,
"peachpuff",
},
[166396] = {
true,
false,
"peachpuff",
},
[83390] = {
true,
false,
"snow",
},
[129553] = {
true,
false,
"paleturquoise",
},
[174197] = {
true,
false,
"snow",
},
[202969] = {
true,
false,
"paleturquoise",
},
[171384] = {
true,
false,
"peachpuff",
},
[168443] = {
true,
false,
"peachpuff",
},
[77700] = {
true,
false,
"snow",
},
[84989] = {
true,
false,
"snow",
},
[196576] = {
true,
false,
"peachpuff",
},
[180336] = {
true,
false,
"snow",
},
[170490] = {
true,
false,
"snow",
},
[168572] = {
true,
false,
"peachpuff",
},
[191206] = {
true,
false,
"snow",
},
[184301] = {
true,
false,
"snow",
},
[202971] = {
true,
false,
"snow",
},
[115488] = {
true,
false,
"peachpuff",
},
[163458] = {
true,
false,
"snow",
},
[84990] = {
true,
false,
"peachpuff",
},
[81985] = {
true,
false,
"snow",
},
[122969] = {
true,
false,
"snow",
},
[100527] = {
true,
false,
"snow",
},
[197985] = {
true,
false,
"snow",
},
[163459] = {
true,
false,
"peachpuff",
},
[178165] = {
true,
false,
"paleturquoise",
},
[104300] = {
true,
false,
"snow",
},
[175992] = {
true,
false,
"paleturquoise",
},
[122970] = {
true,
false,
"paleturquoise",
},
[131492] = {
true,
false,
"peachpuff",
},
[203230] = {
true,
false,
"peachpuff",
},
[86526] = {
true,
false,
"peachpuff",
},
[135329] = {
true,
false,
"paleturquoise",
},
[166275] = {
true,
false,
"snow",
},
[196198] = {
true,
false,
"peachpuff",
},
[198500] = {
true,
false,
"snow",
},
[168578] = {
true,
false,
"snow",
},
[150292] = {
true,
false,
"peachpuff",
},
[198501] = {
true,
false,
"snow",
},
[150165] = {
true,
false,
"snow",
},
[198502] = {
true,
false,
"snow",
},
[122972] = {
true,
false,
"snow",
},
[92538] = {
true,
false,
"paleturquoise",
},
[198503] = {
true,
false,
"snow",
},
[178171] = {
true,
false,
"paleturquoise",
},
[180473] = {
true,
false,
"peachpuff",
},
[196202] = {
true,
false,
"peachpuff",
},
[164873] = {
true,
false,
"paleturquoise",
},
[122973] = {
true,
false,
"peachpuff",
},
[180474] = {
true,
false,
"paleturquoise",
},
[183671] = {
true,
false,
"paleturquoise",
},
[196203] = {
true,
false,
"snow",
},
[169861] = {
true,
false,
"peachpuff",
},
[129559] = {
true,
false,
"paleturquoise",
},
[186741] = {
true,
false,
"snow",
},
[150297] = {
true,
false,
"snow",
},
[174210] = {
true,
false,
"snow",
},
[100532] = {
true,
false,
"paleturquoise",
},
[182778] = {
true,
false,
"paleturquoise",
},
[163086] = {
true,
false,
"peachpuff",
},
[91006] = {
true,
false,
"snow",
},
[173189] = {
true,
false,
"snow",
},
[205158] = {
true,
false,
"paleturquoise",
},
[97720] = {
true,
false,
"paleturquoise",
},
[195696] = {
true,
false,
"paleturquoise",
},
[187768] = {
true,
false,
"snow",
},
[153882] = {
true,
false,
"snow",
},
[134701] = {
true,
false,
"snow",
},
[180864] = {
true,
false,
"paleturquoise",
},
[151325] = {
true,
false,
"paleturquoise",
},
[189816] = {
true,
false,
"snow",
},
[179842] = {
true,
false,
"paleturquoise",
},
[168717] = {
true,
false,
"snow",
},
[183423] = {
true,
false,
"snow",
},
[187771] = {
true,
false,
"peachpuff",
},
[168718] = {
true,
false,
"peachpuff",
},
[144294] = {
true,
false,
"snow",
},
[184319] = {
true,
false,
"peachpuff",
},
[97083] = {
true,
false,
"snow",
},
[183425] = {
true,
false,
"peachpuff",
},
[154014] = {
true,
false,
"snow",
},
[179334] = {
true,
false,
"paleturquoise",
},
[176521] = {
true,
false,
"peachpuff",
},
[130012] = {
true,
false,
"peachpuff",
},
[163862] = {
true,
false,
"peachpuff",
},
[135474] = {
true,
false,
"peachpuff",
},
[179847] = {
true,
false,
"paleturquoise",
},
[144298] = {
true,
false,
"peachpuff",
},
[133685] = {
true,
false,
"paleturquoise",
},
[190206] = {
true,
false,
"peachpuff",
},
[180104] = {
true,
false,
"snow",
},
[114796] = {
true,
false,
"peachpuff",
},
[184580] = {
true,
false,
"snow",
},
[191230] = {
true,
false,
"paleturquoise",
},
[165911] = {
true,
false,
"paleturquoise",
},
[206064] = {
true,
false,
"peachpuff",
},
[104247] = {
true,
false,
"snow",
},
[130909] = {
true,
false,
"paleturquoise",
},
[85194] = {
true,
false,
"paleturquoise",
},
[154020] = {
true,
false,
"snow",
},
[165529] = {
true,
false,
"peachpuff",
},
[191232] = {
true,
false,
"peachpuff",
},
[98813] = {
true,
false,
"snow",
},
[165913] = {
true,
false,
"paleturquoise",
},
[45922] = {
true,
false,
"snow",
},
[206066] = {
true,
false,
"snow",
},
[114542] = {
true,
false,
"peachpuff",
},
[186246] = {
true,
false,
"snow",
},
[155812] = {
true,
false,
"peachpuff",
},
[166299] = {
true,
false,
"peachpuff",
},
[56792] = {
true,
false,
"paleturquoise",
},
[199547] = {
true,
false,
"paleturquoise",
},
[204918] = {
true,
false,
"peachpuff",
},
[164510] = {
true,
false,
"paleturquoise",
},
[171799] = {
true,
false,
"paleturquoise",
},
[167963] = {
true,
false,
"peachpuff",
},
[180495] = {
true,
false,
"paleturquoise",
},
[199037] = {
true,
false,
"snow",
},
[114544] = {
true,
false,
"paleturquoise",
},
[190342] = {
true,
false,
"paleturquoise",
},
[101437] = {
true,
false,
"peachpuff",
},
[122984] = {
true,
false,
"paleturquoise",
},
[41096] = {
true,
false,
"peachpuff",
},
[166302] = {
true,
false,
"snow",
},
[167965] = {
true,
false,
"peachpuff",
},
[195842] = {
true,
false,
"snow",
},
[104251] = {
true,
false,
"paleturquoise",
},
[163618] = {
true,
false,
"peachpuff",
},
[101438] = {
true,
false,
"peachpuff",
},
[186125] = {
true,
false,
"snow",
},
[167967] = {
true,
false,
"peachpuff",
},
[45924] = {
true,
false,
"peachpuff",
},
[206074] = {
true,
false,
"snow",
},
[163620] = {
true,
false,
"peachpuff",
},
[205691] = {
true,
false,
"peachpuff",
},
[98370] = {
true,
false,
"snow",
},
[193799] = {
true,
false,
"paleturquoise",
},
[179733] = {
true,
false,
"paleturquoise",
},
[171805] = {
true,
false,
"peachpuff",
},
[168992] = {
true,
false,
"snow",
},
[196102] = {
true,
false,
"snow",
},
[177816] = {
true,
false,
"snow",
},
[188302] = {
true,
false,
"yellow",
},
[114803] = {
true,
false,
"snow",
},
[81236] = {
true,
false,
"snow",
},
[177817] = {
true,
false,
"peachpuff",
},
[82579] = {
true,
false,
"snow",
},
[165414] = {
true,
false,
"snow",
},
[193291] = {
true,
false,
"paleturquoise",
},
[155824] = {
true,
false,
"peachpuff",
},
[59544] = {
true,
false,
"snow",
},
[187154] = {
true,
false,
"paleturquoise",
},
[135365] = {
true,
false,
"paleturquoise",
},
[187155] = {
true,
false,
"peachpuff",
},
[195851] = {
true,
false,
"peachpuff",
},
[173729] = {
true,
false,
"paleturquoise",
},
[84499] = {
true,
false,
"paleturquoise",
},
[201223] = {
true,
false,
"peachpuff",
},
[115765] = {
true,
false,
"paleturquoise",
},
[156212] = {
true,
false,
"snow",
},
[133835] = {
true,
false,
"peachpuff",
},
[155830] = {
true,
false,
"snow",
},
[183707] = {
true,
false,
"snow",
},
[182045] = {
true,
false,
"paleturquoise",
},
[81432] = {
true,
false,
"snow",
},
[155831] = {
true,
false,
"paleturquoise",
},
[168747] = {
true,
false,
"paleturquoise",
},
[100486] = {
true,
false,
"snow",
},
[192788] = {
true,
false,
"paleturquoise",
},
[59546] = {
true,
false,
"peachpuff",
},
[102788] = {
true,
false,
"peachpuff",
},
[189464] = {
true,
false,
"peachpuff",
},
[76446] = {
true,
false,
"peachpuff",
},
[197904] = {
true,
false,
"snow",
},
[115640] = {
true,
false,
"paleturquoise",
},
[138187] = {
true,
false,
"paleturquoise",
},
[197905] = {
true,
false,
"peachpuff",
},
[131666] = {
true,
false,
"peachpuff",
},
[189338] = {
true,
false,
"snow",
},
[107073] = {
true,
false,
"snow",
},
[176551] = {
true,
false,
"snow",
},
[190362] = {
true,
false,
"peachpuff",
},
[163126] = {
true,
false,
"snow",
},
[193944] = {
true,
false,
"peachpuff",
},
[81819] = {
true,
false,
"peachpuff",
},
[115642] = {
true,
false,
"peachpuff",
},
[163894] = {
true,
false,
"peachpuff",
},
[169905] = {
true,
false,
"peachpuff",
},
[189470] = {
true,
false,
"snow",
},
[188703] = {
true,
false,
"yellow",
},
[81820] = {
true,
false,
"snow",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"paleturquoise",
},
[192796] = {
true,
false,
"paleturquoise",
},
[206351] = {
true,
false,
"snow",
},
[115388] = {
true,
false,
"paleturquoise",
},
[198424] = {
true,
false,
"peachpuff",
},
[190368] = {
true,
false,
"snow",
},
[199703] = {
true,
false,
"paleturquoise",
},
[156226] = {
true,
false,
"snow",
},
[188067] = {
true,
false,
"snow",
},
[168886] = {
true,
false,
"snow",
},
[45930] = {
true,
false,
"paleturquoise",
},
[40943] = {
true,
false,
"snow",
},
[157634] = {
true,
false,
"peachpuff",
},
[166969] = {
true,
false,
"snow",
},
[192800] = {
true,
false,
"peachpuff",
},
[166970] = {
true,
false,
"peachpuff",
},
[82590] = {
true,
false,
"peachpuff",
},
[197149] = {
true,
false,
"snow",
},
[172981] = {
true,
false,
"peachpuff",
},
[166971] = {
true,
false,
"paleturquoise",
},
[152905] = {
true,
false,
"paleturquoise",
},
[164414] = {
true,
false,
"snow",
},
[180015] = {
true,
false,
"peachpuff",
},
[190373] = {
true,
false,
"snow",
},
[164926] = {
true,
false,
"paleturquoise",
},
[206230] = {
true,
false,
"paleturquoise",
},
[166589] = {
true,
false,
"paleturquoise",
},
[84957] = {
true,
false,
"paleturquoise",
},
[197535] = {
true,
false,
"paleturquoise",
},
[198047] = {
true,
false,
"peachpuff",
},
[86684] = {
true,
false,
"snow",
},
[76518] = {
true,
false,
"paleturquoise",
},
[176565] = {
true,
false,
"snow",
},
[205337] = {
true,
false,
"paleturquoise",
},
[101326] = {
true,
false,
"paleturquoise",
},
[165824] = {
true,
false,
"paleturquoise",
},
[164929] = {
true,
false,
"peachpuff",
},
[192934] = {
true,
false,
"peachpuff",
},
[190377] = {
true,
false,
"peachpuff",
},
[84767] = {
true,
false,
"paleturquoise",
},
[163524] = {
true,
false,
"paleturquoise",
},
[114626] = {
true,
false,
"paleturquoise",
},
[195877] = {
true,
false,
"paleturquoise",
},
[168384] = {
true,
false,
"peachpuff",
},
[131812] = {
true,
false,
"paleturquoise",
},
[101008] = {
true,
false,
"paleturquoise",
},
[195878] = {
true,
false,
"snow",
},
[131685] = {
true,
false,
"snow",
},
[114627] = {
true,
false,
"peachpuff",
},
[196263] = {
true,
false,
"snow",
},
[190381] = {
true,
false,
"paleturquoise",
},
[154744] = {
true,
false,
"paleturquoise",
},
[80816] = {
true,
false,
"snow",
},
[196577] = {
true,
false,
"snow",
},
[167876] = {
true,
false,
"paleturquoise",
},
[197671] = {
true,
false,
"peachpuff",
},
[197799] = {
true,
false,
"snow",
},
[190174] = {
true,
false,
"paleturquoise",
},
[59552] = {
true,
false,
"peachpuff",
},
[40634] = {
true,
false,
"snow",
},
[170690] = {
true,
false,
"peachpuff",
},
[168153] = {
true,
false,
"paleturquoise",
},
[160495] = {
true,
false,
"snow",
},
[186191] = {
true,
false,
"peachpuff",
},
[191847] = {
true,
false,
"snow",
},
[176573] = {
true,
false,
"paleturquoise",
},
[155090] = {
true,
false,
"snow",
},
[75979] = {
true,
false,
"paleturquoise",
},
[190128] = {
true,
false,
"yellow",
},
[114629] = {
true,
false,
"peachpuff",
},
[164737] = {
true,
false,
"paleturquoise",
},
[186420] = {
true,
false,
"snow",
},
[167111] = {
true,
false,
"snow",
},
[175861] = {
true,
false,
"paleturquoise",
},
[183497] = {
true,
false,
"peachpuff",
},
[151127] = {
true,
false,
"paleturquoise",
},
[179388] = {
true,
false,
"snow",
},
[189234] = {
true,
false,
"paleturquoise",
},
[129527] = {
true,
false,
"peachpuff",
},
[203812] = {
true,
false,
"paleturquoise",
},
[82597] = {
true,
false,
"paleturquoise",
},
[101075] = {
true,
false,
"paleturquoise",
},
[176575] = {
true,
false,
"snow",
},
[200137] = {
true,
false,
"snow",
},
[131819] = {
true,
false,
"snow",
},
[176959] = {
true,
false,
"snow",
},
[80935] = {
true,
false,
"snow",
},
[186226] = {
true,
false,
"paleturquoise",
},
[167113] = {
true,
false,
"peachpuff",
},
[162040] = {
true,
false,
"paleturquoise",
},
[194990] = {
true,
false,
"snow",
},
[155221] = {
true,
false,
"snow",
},
[96664] = {
true,
false,
"peachpuff",
},
[163128] = {
true,
false,
"snow",
},
[95769] = {
true,
false,
"snow",
},
[170882] = {
true,
false,
"peachpuff",
},
[185528] = {
true,
false,
"snow",
},
[185656] = {
true,
false,
"snow",
},
[150142] = {
true,
false,
"snow",
},
[195119] = {
true,
false,
"snow",
},
[131821] = {
true,
false,
"peachpuff",
},
[187897] = {
true,
false,
"paleturquoise",
},
[80936] = {
true,
false,
"peachpuff",
},
[180348] = {
true,
false,
"peachpuff",
},
[185529] = {
true,
false,
"paleturquoise",
},
[177716] = {
true,
false,
"snow",
},
[175550] = {
true,
false,
"paleturquoise",
},
[190686] = {
true,
false,
"peachpuff",
},
[45912] = {
true,
false,
"snow",
},
[169159] = {
true,
false,
"gold",
},
[129529] = {
true,
false,
"paleturquoise",
},
[95834] = {
true,
false,
"paleturquoise",
},
[45935] = {
true,
false,
"snow",
},
[208698] = {
true,
false,
"paleturquoise",
},
[189878] = {
true,
false,
"yellow",
},
[196115] = {
true,
false,
"peachpuff",
},
[186220] = {
true,
false,
"snow",
},
[114632] = {
true,
false,
"snow",
},
[205735] = {
true,
false,
"peachpuff",
},
[214608] = {
true,
false,
"snow",
},
[98275] = {
true,
false,
"peachpuff",
},
[208165] = {
true,
false,
"snow",
},
[167612] = {
true,
false,
"peachpuff",
},
[41139] = {
true,
false,
"peachpuff",
},
[133870] = {
true,
false,
"snow",
},
[179010] = {
true,
false,
"snow",
},
[95771] = {
true,
false,
"peachpuff",
},
[189555] = {
true,
false,
"snow",
},
[151773] = {
true,
false,
"peachpuff",
},
[165763] = {
true,
false,
"snow",
},
[188026] = {
true,
false,
"paleturquoise",
},
[199549] = {
true,
false,
"paleturquoise",
},
[166301] = {
true,
false,
"paleturquoise",
},
[165762] = {
true,
false,
"paleturquoise",
},
[186658] = {
true,
false,
"snow",
},
[88163] = {
true,
false,
"paleturquoise",
},
[168934] = {
true,
false,
"paleturquoise",
},
[157017] = {
true,
false,
"peachpuff",
},
[189706] = {
true,
false,
"yellow",
},
[170572] = {
true,
false,
"peachpuff",
},
[164562] = {
true,
false,
"paleturquoise",
},
[198577] = {
true,
false,
"peachpuff",
},
[193462] = {
true,
false,
"snow",
},
[105715] = {
true,
false,
"peachpuff",
},
[83025] = {
true,
false,
"peachpuff",
},
[162133] = {
true,
false,
"paleturquoise",
},
[157810] = {
true,
false,
"snow",
},
[96587] = {
true,
false,
"snow",
},
[164563] = {
true,
false,
"peachpuff",
},
[114804] = {
true,
false,
"peachpuff",
},
[104278] = {
true,
false,
"paleturquoise",
},
[179269] = {
true,
false,
"paleturquoise",
},
[178630] = {
true,
false,
"snow",
},
[171341] = {
true,
false,
"snow",
},
[59555] = {
true,
false,
"paleturquoise",
},
[208193] = {
true,
false,
"peachpuff",
},
[168109] = {
true,
false,
"snow",
},
[174773] = {
true,
false,
"magenta",
},
[194487] = {
true,
false,
"peachpuff",
},
[98081] = {
true,
false,
"paleturquoise",
},
[165076] = {
true,
false,
"peachpuff",
},
[184131] = {
true,
false,
"paleturquoise",
},
[129788] = {
true,
false,
"snow",
},
[168658] = {
true,
false,
"paleturquoise",
},
[102295] = {
true,
false,
"paleturquoise",
},
[150168] = {
true,
false,
"paleturquoise",
},
[128434] = {
true,
false,
"peachpuff",
},
[92610] = {
true,
false,
"paleturquoise",
},
[185537] = {
true,
false,
"peachpuff",
},
[171343] = {
true,
false,
"paleturquoise",
},
[190340] = {
true,
false,
"peachpuff",
},
[115019] = {
true,
false,
"snow",
},
[191164] = {
true,
false,
"peachpuff",
},
[212775] = {
true,
false,
"snow",
},
[175517] = {
true,
false,
"peachpuff",
},
[163121] = {
true,
false,
"peachpuff",
},
[114316] = {
true,
false,
"snow",
},
[75506] = {
true,
false,
"snow",
},
[45704] = {
true,
false,
"dimgray",
},
[102232] = {
true,
false,
"peachpuff",
},
[164567] = {
true,
false,
"snow",
},
[184132] = {
true,
false,
"peachpuff",
},
[165556] = {
true,
false,
"paleturquoise",
},
[190207] = {
true,
false,
"snow",
},
[98521] = {
true,
false,
"paleturquoise",
},
[76104] = {
true,
false,
"peachpuff",
},
[168627] = {
true,
false,
"snow",
},
[187969] = {
true,
false,
"peachpuff",
},
[184335] = {
true,
false,
"snow",
},
[168882] = {
true,
false,
"paleturquoise",
},
[164921] = {
true,
false,
"snow",
},
[180323] = {
true,
false,
"paleturquoise",
},
[114317] = {
true,
false,
"snow",
},
[179841] = {
true,
false,
"snow",
},
[131677] = {
true,
false,
"paleturquoise",
},
[205212] = {
true,
false,
"paleturquoise",
},
[132126] = {
true,
false,
"peachpuff",
},
[197406] = {
true,
false,
"paleturquoise",
},
[205727] = {
true,
false,
"peachpuff",
},
[178008] = {
true,
false,
"yellow",
},
[102095] = {
true,
false,
"peachpuff",
},
[168007] = {
true,
false,
"peachpuff",
},
[214441] = {
true,
false,
"paleturquoise",
},
[169927] = {
true,
false,
"paleturquoise",
},
[116549] = {
true,
false,
"snow",
},
[176974] = {
true,
false,
"paleturquoise",
},
[190401] = {
true,
false,
"snow",
},
[164506] = {
true,
false,
"peachpuff",
},
[199325] = {
true,
false,
"snow",
},
[180335] = {
true,
false,
"snow",
},
[137830] = {
true,
false,
"peachpuff",
},
[205363] = {
true,
false,
"snow",
},
[152898] = {
true,
false,
"paleturquoise",
},
[201288] = {
true,
false,
"paleturquoise",
},
[167964] = {
true,
false,
"paleturquoise",
},
[162099] = {
true,
false,
"paleturquoise",
},
[127106] = {
true,
false,
"paleturquoise",
},
[44404] = {
true,
false,
"snow",
},
[179852] = {
true,
false,
"peachpuff",
},
[135240] = {
true,
false,
"peachpuff",
},
[150250] = {
true,
false,
"snow",
},
[178392] = {
true,
false,
"paleturquoise",
},
[184023] = {
true,
false,
"peachpuff",
},
[129600] = {
true,
false,
"snow",
},
[114319] = {
true,
false,
"peachpuff",
},
[115406] = {
true,
false,
"snow",
},
[173190] = {
true,
false,
"snow",
},
[195135] = {
true,
false,
"paleturquoise",
},
[150251] = {
true,
false,
"peachpuff",
},
[180432] = {
true,
false,
"peachpuff",
},
},
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["hook_data"] = {
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellName = castBar.SpellName\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n                \n                -- Spell Reflection coloring\n                if envTable.optionsShowSecondaryInterrupts and IsSpellKnown(23920) and not envTable.isSpellOnCooldown_IgnoreGCD(23920) then\n                    -- Check to see if the ability is targetting the player\n                    if UnitExists(targetUnitId) then\n                        if UnitName(targetUnitId) == UnitName(\"player\") then\n                            -- Color the bar if the spell is reflectable\n                            if envTable.IsSpellReflectable(C_Map.GetBestMapForUnit(\"player\"), modTable.reflectableSpells, castBar.SpellName) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            end\n                        end\n                    end\n                end\n            end\n            \n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    \n    -- Checks to see if the spell being cast is reflectable. Checks for a spell name and zone ID match.\n    function envTable.IsSpellReflectable(zoneID, spellList, spellName)\n        for i = 1, #spellList do\n            -- Check for matching spell name\n            for y = 1, #spellList[i][\"spells\"] do\n                if spellList[i][\"spells\"][y] == spellName then\n                    -- Check to see if the player is in one of the supported zones for this spell ID\n                    for z = 1, #spellList[i][\"zones\"] do\n                        if spellList[i][\"zones\"][z] == zoneID then\n                            return true\n                        end\n                    end\n                end\n            end\n        end\n        return false\n    end\n    \n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \n    \n    -- The list of supported spell reflection names and zones.\n    modTable.reflectableSpells =\n    {\n        -- Initial data for reflectable spells credit to: https://docs.google.com/spreadsheets/d/e/2PACX-1vS26lkSc_eaulHX7-UY8Uu-7DAHvkScxh3npd0kQn3uvvWsgsQm9ducLUi4R2mb7ieNluVilyq5sQe5/pubhtml#\n        \n        -- The Azure Vault\n        [1] =\n        {\n            [\"spells\"] =\n            {\n                \"Infused Strike\",\n                \"Illusionary Bolt\",\n                \"Dragon Strike\",\n                \"Arcane Bolt\",\n                \"Infused Ground\",\n                \"Condensed Frost\",\n                \"Heavy Tome\",\n            },\n            [\"zones\"] =\n            {\n                2073, 2074, 2075, 2076, 2077\n            }\n        },\n        -- Algeth'ar Academy\n        [2] =\n        {\n            [\"spells\"] =\n            {\n                \"Energy Bomb\",\n                \"Darting Sting\",\n                \"Arcane Missiles\",\n                \"Vicious Ambush\",\n                \"Surge\"\n            },\n            [\"zones\"] =\n            {\n                2097, 2098, 2099\n            }\n        },\n        -- Court of Stars\n        [3] =\n        {\n            [\"spells\"] =\n            {\n                \"Drifting Embers\",\n                \"Firebolt\",\n                \"Throw Torch\",\n                \"Vampiric Claws\",\n                \"Suppress\",\n                \"Shadow Slash\",\n                \"Eyestorm\"\n            },\n            [\"zones\"] =\n            {\n                761, 762, 763\n            }\n        },\n        -- Halls of Valor\n        [4] =\n        {\n            [\"spells\"] =\n            {\n                \"Arcing Bolt\",\n                \"Searing Light\",\n                \"Etch\",\n                \"Shattered Rune\",\n                \"Thunderous Bolt\"\n            },\n            [\"zones\"] =\n            {\n                703, 704, 705, 829\n            }\n        },\n        -- Ruby Life Pools\n        [5] =\n        {\n            [\"spells\"] =\n            {\n                \"Cold Claws\",\n                \"Frigid Shard\",\n                \"Primal Chill\",\n                \"Living Bomb\",\n                \"Icebolt\",\n                \"Cold Claws\",\n                \"Cinderbolt\",\n                \"Flame Dance\",\n                \"Lightning Bolt\",\n                \"Burning Touch\",\n                \"Thunder Bolt\"\n            },\n            [\"zones\"] =\n            {\n                2094, 2095\n            }\n        },\n        -- Shadowmoon Burial Grounds\n        [6] =\n        {\n            [\"spells\"] =\n            {\n                \"Deathspike\",\n                \"Void Devastation\",\n                \"Death Blast\",\n                \"Plague Spit\",\n                \"Shadow Bolt\",\n                \"Shadow Word: Frailty\",\n                \"Rending Voidlash\",\n                \"Void Bolt\"\n            },\n            [\"zones\"] =\n            {\n                574, 575, 576\n            }\n        },\n        -- Temple of the Jade Serpent\n        [7] =\n        {\n            [\"spells\"] =\n            {\n                \"Hydrolance\",\n                \"Agony\",\n                \"Serpent Strike\",\n                \"Jade Serpent Wave\",\n                \"Defiling Mist\",\n                \"Touch of Ruin\",\n                \"Throw Torch\",\n                \"Dark Claw\"\n            },\n            [\"zones\"] =\n            {\n                429, 430, 791, 792\n            }\n        },\n        -- The Nokhud Offensive\n        [8] =\n        {\n            [\"spells\"] =\n            {\n                \"Wind Burst\",\n                \"Gale Arrow\",\n                \"Conductive Strike\",\n                \"Storm Shock\",\n                \"Stormbolt\",\n                \"Chain Lightning\",\n                \"Thunderstrike\",\n                \"Death Bolt\",\n                \"Surge\"\n            },\n            [\"zones\"] =\n            {\n                2093\n            }\n        },\n        -- Vault of the Incarnates\n        [9] =\n        {\n            [\"spells\"] =\n            {\n                \"Primal Flow\",\n                \"Chain Lightning\",\n                \"Frost Spike\",\n                \"Lightning Bolt\",\n                \"Aerial Buffet\",\n                \"Aerial Slash\",\n                \"Storm Bolt\",\n                \"Ice Barrage\",\n                \"Static Jolt\"\n                \n            },\n            [\"zones\"] =\n            {\n                2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126\n            }\n        }\n    }\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
},
["Time"] = 1724458222,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["spec"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1226,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["Name"] = "Enhanced Enemy Castbar",
["LastHookEdited"] = "Cast Stop",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1723845858,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 216,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["Name"] = "Detailed Time Format",
["PlaterCore"] = 1,
["version"] = 13,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["Time"] = 1723845860,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 89,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["Name"] = "Paint Aura Timers",
["PlaterCore"] = 1,
["version"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Health Update"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    envTable.ShowMaxHealth = false\n    envTable.ShowPercent = true\n    envTable.Separator = \" • \"\n    \n    --privite:\n    function envTable.UpdateHealth (unitFrame)\n        --get the health and health max current values\n        local currentHealth = unitFrame.healthBar.CurrentHealth or 0\n        local currentHealthMax = unitFrame.healthBar.CurrentHealthMax or 0\n        \n        --build the string text with current health\n        local healthString = Plater.FormatNumber (currentHealth) .. \"\"\n        \n        --if is showing max health, add it in the health string text\n        if (envTable.ShowMaxHealth) then\n            healthString = healthString .. envTable.Separator .. Plater.FormatNumber (currentHealthMax)\n        end\n        \n        --if is showing the percent text, add it into the string text\n        if (envTable.ShowPercent) then\n            local percent = currentHealth / currentHealthMax * 100\n            local fraction = \"%.1f\"\n            \n            if (percent == 100) then\n                fraction = \"%.0f\"\n            elseif (percent < 10) then\n                fraction = \"%.1f\"\n            end\n            \n            if (envTable.ShowMaxHealth) then\n                healthString = healthString .. \" (\" .. format (fraction, percent) .. \"%)\"\n            else\n                healthString = healthString .. envTable.Separator .. format (fraction, percent) .. \"%\"\n            end\n        end\n        \n        --set the string text\n        unitFrame.healthBar.lifePercent:SetText (healthString)\n    end\n    \nend",
},
["Hooks"] = {
["Health Update"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.UpdateHealth (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    envTable.ShowMaxHealth = false\n    envTable.ShowPercent = true\n    envTable.Separator = \" • \"\n    \n    --privite:\n    function envTable.UpdateHealth (unitFrame)\n        --get the health and health max current values\n        local currentHealth = unitFrame.healthBar.CurrentHealth or 0\n        local currentHealthMax = unitFrame.healthBar.CurrentHealthMax or 0\n        \n        --build the string text with current health\n        local healthString = Plater.FormatNumber (currentHealth) .. \"\"\n        \n        --if is showing max health, add it in the health string text\n        if (envTable.ShowMaxHealth) then\n            healthString = healthString .. envTable.Separator .. Plater.FormatNumber (currentHealthMax)\n        end\n        \n        --if is showing the percent text, add it into the string text\n        if (envTable.ShowPercent) then\n            local percent = currentHealth / currentHealthMax * 100\n            local fraction = \"%.1f\"\n            \n            if (percent == 100) then\n                fraction = \"%.0f\"\n            elseif (percent < 10) then\n                fraction = \"%.1f\"\n            end\n            \n            if (envTable.ShowMaxHealth) then\n                healthString = healthString .. \" (\" .. format (fraction, percent) .. \"%)\"\n            else\n                healthString = healthString .. envTable.Separator .. format (fraction, percent) .. \"%\"\n            end\n        end\n        \n        --set the string text\n        unitFrame.healthBar.lifePercent:SetText (healthString)\n    end\n    \nend",
},
["Time"] = 1725267318,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["spec"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "https://wago.io/UMY67A2bw/1",
["Icon"] = 237031,
["Enabled"] = true,
["Revision"] = 88,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the total health and percent in the health amount text. See the constructor code to change options.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Health / Max Health (%)",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1723845858,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 194,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Border",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
["TargetBorderSize"] = 1,
["SpellIconXOffset"] = 0,
["ReplaceDefaultBorder"] = false,
["ShowSpellIcon"] = true,
},
["LastHookEdited"] = "Initialization",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        \n        icon:Hide()\n        castBar.IconBorder:Hide()\n        \n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            \n            icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n            icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint(\n                \"center\",\n                castBar,\n                \"left\",\n                modTable.config.ShieldIconXOffset,\n                modTable.config.ShieldIconYOffset\n            )\n            \n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n            else \n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            end\n            if modTable.config.ExpandTargetBorder then\n                targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n            else\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1724156599,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["spec"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1394,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Target Border",
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Key"] = "TargetBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Key"] = "CastBarBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Key"] = "SpellIconBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Key"] = "SpellIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Key"] = "ShieldIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Key"] = "ShieldIconYOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Key"] = "ShieldIconWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Key"] = "ShieldIconHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1723845859,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["spec"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 285,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Name Shortener",
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 4,
["Key"] = "short_names",
["Value"] = true,
["Name"] = "Shorten Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Key"] = "colour_names",
["Value"] = true,
["Name"] = "Colour by Raidmark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1723845859,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["spec"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 78,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Hide Interrupted",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
},
["auras_per_row_auto"] = false,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 3,
["disable_omnicc_on_auras"] = true,
["aura_width"] = 28,
["bossmod_support_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["blizzard_nameplate_large_font_size"] = 12,
["range_check_enabled"] = false,
["pet_width_scale"] = 0.99999994039536,
["quick_hide"] = true,
["target_highlight_color"] = {
0.50196081399918,
0.50196081399918,
},
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["castbar_target_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["extra_icon_timer_outline"] = "OUTLINE",
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1719710916,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 79,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["SpellIds"] = {
343470,
423228,
},
["Options"] = {
},
["__TrashAt"] = 1724921720,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["__TrashAt"] = 1725021408,
["Time"] = 1725021405,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Revision"] = 30,
["Options"] = {
},
["Enabled"] = true,
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Is Cast Bar [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["__TrashAt"] = 1725021419,
["Time"] = 1725021406,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 85,
["Options"] = {
},
["Enabled"] = true,
["Prio"] = 99,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["semver"] = "",
["Icon"] = 610472,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["ScriptType"] = 2,
["__TrashAt"] = 1725021428,
["Time"] = 1719757483,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["Revision"] = 318,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.2,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.9,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.63921570777893,
0.63921570777893,
0.63921570777893,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE Hit All [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["semver"] = "",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["__TrashAt"] = 1725021431,
["NpcNames"] = {
},
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Name"] = "Cast - AoE With Range [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 0.8,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.74117648601532,
0.74117648601532,
0.74117648601532,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1725021432,
["NpcNames"] = {
},
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Desc"] = "Show a different animation for the cast bar.",
["Name"] = "Cast - Debuff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.96862751245499,
0.9764706492424,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.49019610881805,
0,
0.54901963472366,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["__TrashAt"] = 1725021434,
["NpcNames"] = {
},
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Name"] = "Animation Speed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1725021436,
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1725021439,
["NpcNames"] = {
},
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Desc"] = "Healing effect that cannot be interrupted.",
["Name"] = "Cast - Heal Stun [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.3647058904171,
0.10588236153126,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["__TrashAt"] = 1725021440,
["NpcNames"] = {
},
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heroic Leap [P]",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["version"] = -1,
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["__TrashAt"] = 1725021449,
["Time"] = 1719711112,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 831,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 6,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["Enabled"] = true,
["version"] = -1,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["Name"] = "Cast - Important by Color [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["scriptId"] = "table: 000001E9E0095930",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["ScriptType"] = 2,
["__TrashAt"] = 1725021452,
["Time"] = 1723155144,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["Revision"] = 158,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.41662168502808,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Name"] = "Dots X Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Max Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.52549022436142,
0.5137255191803,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["Enabled"] = true,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ongoing Cast [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["semver"] = "",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["__TrashAt"] = 1725021454,
["NpcNames"] = {
},
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Name"] = "Cast - Shining Green [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["__TrashAt"] = 1725021459,
["Time"] = 1720031975,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["Revision"] = 220,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["Enabled"] = true,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Voidzone [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["__TrashAt"] = 1725021460,
["NpcNames"] = {
},
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["Name"] = "Cast - Special Ability [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["__TrashAt"] = 1725021462,
["NpcNames"] = {
},
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Desc"] = "Change the spark color to differentiate a cast from another.",
["Name"] = "Cast - Spark Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Width Scale",
["Value"] = 1,
["Key"] = "sparkWithScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1725021463,
["NpcNames"] = {
},
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Desc"] = "Play a very fast flash when the cast start.",
["Name"] = "Cast - Simple Interrupt [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
},
["aura_width2"] = 28,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["aura_grow_direction"] = 1,
["cast_statusbar_use_fade_effects"] = false,
["cast_statusbar_spark_alpha"] = 0,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["first_run3"] = true,
["aura_sort"] = true,
["ui_parent_scale_tune"] = 1,
["health_statusbar_bgtexture"] = "Blizzard Raid Bar",
["ui_parent_target_strata"] = "BACKGROUND",
["aura_show_enrage"] = true,
["aura_tracker"] = {
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["342073"] = true,
["233210"] = true,
["209859"] = true,
},
["buff"] = {
412012,
412695,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["debuff_tracked"] = {
["292451"] = true,
["389809"] = true,
["312595"] = true,
},
["debuff_banned"] = {
["418339"] = true,
["353793"] = true,
["324260"] = true,
["331934"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["390271"] = true,
["392566"] = true,
["420092"] = true,
["284678"] = true,
["359078"] = true,
["359180"] = true,
["317583"] = true,
["270569"] = true,
["375583"] = true,
["381743"] = true,
["356372"] = true,
["356181"] = true,
["411717"] = true,
["391568"] = true,
["333526"] = true,
["390155"] = true,
["428103"] = true,
["344748"] = true,
["426783"] = true,
["417419"] = true,
["269576"] = true,
["420054"] = true,
["394327"] = true,
["436582"] = true,
["373305"] = true,
["372127"] = true,
["115994"] = true,
["410790"] = true,
["440339"] = true,
["403696"] = true,
["379021"] = true,
["302564"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["430184"] = true,
["435476"] = true,
["340007"] = true,
["356329"] = true,
["283649"] = true,
["390276"] = true,
["392885"] = true,
["440340"] = true,
["329449"] = true,
["376974"] = true,
["426534"] = true,
["411715"] = true,
["331016"] = true,
["328287"] = true,
["345547"] = true,
["258883"] = true,
["367902"] = true,
["280494"] = true,
["355759"] = true,
},
["buff_banned"] = {
["333553"] = true,
["61573"] = true,
["206150"] = true,
["299450"] = true,
["411635"] = true,
["352854"] = true,
["61574"] = true,
},
},
["extra_icon_caster_font"] = "Friz Quadrata TT",
["cast_statusbar_color"] = {
0.63529413938522,
0.73725491762161,
0.91764712333679,
1,
},
["update_throttle"] = 0.5,
["cast_statusbar_interrupt_anim"] = false,
["tocversion"] = 110002,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["target_highlight_alpha"] = 1,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["target_shady_combat_only"] = false,
["target_shady_alpha"] = 0.59999996423721,
["extra_icon_use_blizzard_border_color"] = false,
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["target_highlight_height"] = 20,
["hover_highlight_alpha"] = 0.25,
["health_cutoff_upper"] = false,
["health_selection_overlay"] = "Blizzard Raid Bar",
["blizzard_nameplate_font_size"] = 10,
["indicator_spec"] = false,
["health_animation_time_dilatation"] = 2.6199998855591,
["ghost_auras"] = {
["enabled"] = true,
["height"] = 28,
["width"] = 28,
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["cast_statusbar_color_interrupted"] = {
0.25098040699959,
1,
0.25098040699959,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Fixate On You"] = 11,
["Explosion Affix M+"] = 14,
["Cast - Important Target [P]"] = 2,
["Cast - Heroic Leap [P]"] = 3,
["Cast - AoE Hit All [P]"] = 3,
["Fixate"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Countdown"] = 11,
["Cast - Heal Cut [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Spiteful Affix"] = 3,
["Add - Warning [P]"] = 5,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Auto Set Skull"] = 11,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Very Important"] = 15,
["Cast - Important by Color [P]"] = 2,
["Cast - Shining Green [P]"] = 3,
["Unit - Show Energy"] = 11,
},
["number_region_first_run"] = true,
["cast_statusbar_color_channeling"] = {
0.63529413938522,
0.73725491762161,
0.91764712333679,
1,
},
["aura2_grow_direction"] = 3,
["indicator_elite"] = false,
["target_highlight"] = false,
["cast_statusbar_texture"] = "Blizzard Raid Bar",
["patch_version"] = 37,
["indicator_faction"] = false,
["range_check_alpha_friendlies"] = 0.5,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["noaggro"] = {
0.50196081399918,
0.50196081399918,
},
["pulling"] = {
nil,
0.25098040699959,
0.25098040699959,
},
},
},
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.80000007152557,
0.25098040699959,
},
["anothertank"] = {
1,
0.50196081399918,
0.25098040699959,
},
["aggro"] = {
0.25098040699959,
1,
0.25098040699959,
},
["noaggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["nocombat"] = {
1,
0.25098040699959,
0.25098040699959,
},
["pulling"] = {
[3] = 0.25098040699959,
},
},
},
["indicator_pet"] = false,
["target_shady_enabled"] = false,
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_width"] = 4,
},
},
["InterruptableSpells"] = {
[187707] = true,
[96231] = true,
[32747] = true,
[429812] = true,
[6552] = true,
[57994] = true,
[1766] = true,
[2139] = true,
[420320] = true,
[147362] = true,
[351338] = true,
[47528] = true,
[420330] = true,
[420090] = true,
[31935] = true,
[426240] = true,
[386071] = true,
[116705] = true,
[93985] = true,
[427609] = true,
[183752] = true,
[19647] = true,
[97547] = true,
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
},
["captured_casts"] = {
[341422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Court Executor",
["npcID"] = 174194,
},
[450628] = {
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_START",
["npcID"] = 209801,
},
[372369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ragefin Executioner",
["npcID"] = 213408,
},
[450885] = {
["source"] = "Cinderbee Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 222976,
},
[434773] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[369813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wickbreaker",
["npcID"] = 215077,
},
[427357] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[440912] = {
["source"] = "Festering Sporemass",
["event"] = "SPELL_CAST_START",
["npcID"] = 217963,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[461884] = {
["source"] = "Spring Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215810,
},
[427359] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[428894] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[461886] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Basilisk",
["npcID"] = 221298,
},
[448843] = {
["source"] = "Flickerflame Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212542,
},
[427616] = {
["encounterName"] = "Kyrioss",
["source"] = "Unruly Stormrook",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 207186,
},
[456772] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Nast",
["npcID"] = 213200,
},
[452169] = {
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 211858,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[456263] = {
["source"] = "Candleflyer Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 220276,
},
[438618] = {
["source"] = "Engorged Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 214840,
},
[430179] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[431714] = {
["source"] = "Dreadstrike Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 213189,
},
[454732] = {
["source"] = "Tka'ktath",
["event"] = "SPELL_CAST_START",
["npcID"] = 216046,
},
[445781] = {
["source"] = "Cogchewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212617,
},
[456523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clump O' Wax",
["npcID"] = 226809,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[426345] = {
["source"] = "Void Touched Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 212400,
},
[438877] = {
["source"] = "Nakt",
["event"] = "SPELL_CAST_START",
["npcID"] = 218324,
},
[438622] = {
["isChanneled"] = true,
["source"] = "Engorged Crawler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214840,
},
[453200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cragmund",
["npcID"] = 220269,
},
[443482] = {
["source"] = "Shadowtide Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 220886,
},
[450899] = {
["source"] = "Cinderbee Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 222976,
},
[460618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overworked Cook",
["npcID"] = 220744,
},
[456782] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Nast",
["npcID"] = 213200,
},
[448854] = {
["source"] = "Enraged Drunkard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218655,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[341441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Gargon",
["npcID"] = 174069,
},
[427629] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[440162] = {
["source"] = "Scarlet Stinkcap",
["event"] = "SPELL_CAST_START",
["npcID"] = 212579,
},
[443487] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[433002] = {
["source"] = "Bloodstained Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 216333,
},
[448859] = {
["source"] = "Enraged Drunkard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218655,
},
[434793] = {
["isChanneled"] = true,
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216293,
},
[458068] = {
["source"] = "Croakit",
["event"] = "SPELL_CAST_START",
["npcID"] = 214757,
},
[452442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[448351] = {
["source"] = "Kobold Snuffercrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218662,
},
[452699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Hulk",
["npcID"] = 215813,
},
[250774] = {
["event"] = "SPELL_CAST_START",
["source"] = "Putrid Engineer",
["npcID"] = 126337,
},
[426869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Enforcer",
["npcID"] = 212548,
},
[429427] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[256401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206096,
},
[428916] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[429428] = {
["source"] = "Earth Burst Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 214287,
},
[427894] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[455260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[463956] = {
["source"] = "Magma Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 215770,
},
[249114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garothi Worldbreaker",
["npcID"] = 122450,
},
[434802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixin",
["npcID"] = 217531,
},
[427897] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[431734] = {
["source"] = "Shadesworn Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218527,
},
[462936] = {
["source"] = "Medbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229769,
},
[341200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Singuard",
["npcID"] = 174100,
},
[440687] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[328414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Arcanist",
["npcID"] = 165270,
},
[458080] = {
["source"] = "Croakit",
["event"] = "SPELL_CAST_START",
["npcID"] = 214757,
},
[288774] = {
["isChanneled"] = true,
["source"] = "Malfunctioning Pylon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229739,
},
[450153] = {
["source"] = "Raging Roots",
["event"] = "SPELL_CAST_START",
["npcID"] = 216250,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[440181] = {
["source"] = "Boskroot Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 212736,
},
[442995] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[451435] = {
["source"] = "Voidwraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 224466,
},
[456295] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[449135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Overseer",
["npcID"] = 212542,
},
[398497] = {
["source"] = "Rockwing Glider",
["event"] = "SPELL_CAST_START",
["npcID"] = 226648,
},
[424328] = {
["source"] = "Waxtail Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 213000,
},
[442998] = {
["source"] = "Sureki Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 222688,
},
[440185] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustul Titancap",
["npcID"] = 213115,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[446325] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Infected Peafowl",
["npcID"] = 212710,
},
[454765] = {
["source"] = "Tka'ktath",
["event"] = "SPELL_CAST_START",
["npcID"] = 216046,
},
[443001] = {
["source"] = "Maddened Hierophant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214398,
},
[445559] = {
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 211858,
},
[463206] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[427402] = {
["source"] = "Cursed Rookguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 207197,
},
[446328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devouring Fog Beast",
["npcID"] = 219448,
},
[441214] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[427404] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[455281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[426893] = {
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_START",
["npcID"] = 209801,
},
[445819] = {
["source"] = "Ashen Stonestalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 217624,
},
[420501] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[450424] = {
["source"] = "Waxy Blob",
["event"] = "SPELL_CAST_START",
["npcID"] = 229818,
},
[434824] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[440195] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wanton Shadow",
["npcID"] = 225338,
},
[118297] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[445311] = {
["source"] = "Colossal Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 224589,
},
[436360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Darkweaver",
["npcID"] = 216868,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[452985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siege Marshal Tekhzok",
["npcID"] = 215987,
},
[432781] = {
["source"] = "Radiating Voidstone",
["event"] = "SPELL_CAST_START",
["npcID"] = 212739,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[464240] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[448384] = {
["source"] = "Wicktwister Kobold",
["event"] = "SPELL_CAST_START",
["npcID"] = 221066,
},
[448640] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[463218] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[450176] = {
["source"] = "Nerubian Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 208243,
},
[400050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepflayer Hunter",
["npcID"] = 221198,
},
[445830] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[444296] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[465012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 228015,
},
[440205] = {
["source"] = "Living Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 214379,
},
[456319] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[440207] = {
["source"] = "Voidstone Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[450182] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Mudspawn",
["npcID"] = 219897,
},
[456321] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[452231] = {
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 211858,
},
[456835] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hungerer of the Deeps",
["npcID"] = 221199,
},
[428703] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[430238] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[450188] = {
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 213834,
},
[432030] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[455815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Black Blood",
["encounterID"] = 2901,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215968,
},
[434589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[449167] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[343287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Archivist",
["npcID"] = 173633,
},
[430754] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[329989] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Gargon",
["npcID"] = 174069,
},
[449937] = {
["source"] = "Cyclonecrier Alpha",
["event"] = "SPELL_CAST_START",
["npcID"] = 222959,
},
[456331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Candlecrusher",
["npcID"] = 219619,
},
[441242] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[432037] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[462983] = {
["source"] = "Automatic Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 229778,
},
[450196] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Candlelit Blind-Hound",
["npcID"] = 218213,
},
[440222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[428202] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[449941] = {
["source"] = "Emperor Pitfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 219265,
},
[450197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[451732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swarming Cogwalker",
["npcID"] = 232871,
},
[455313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[458638] = {
["source"] = "Awakened Flamecoil Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 225895,
},
[439202] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[457872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepfiend Azellix",
["npcID"] = 218458,
},
[427950] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[456851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spore-infused Shalewing",
["npcID"] = 221217,
},
[191726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[441252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horrid Effusia",
["npcID"] = 211866,
},
[378850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Babbling Book",
["npcID"] = 223852,
},
[325399] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Artificer Xy'mox",
["npcID"] = 166644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2405,
},
[440231] = {
["source"] = "Dark-Crazed Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 206067,
},
[452252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Master Machinist Dunstan",
["npcID"] = 217353,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[450718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[391385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Magma Fury",
["npcID"] = 214924,
},
[456346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[433841] = {
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216364,
},
[157331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[447141] = {
["source"] = "Repurposed Loaderbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 222923,
},
[447909] = {
["event"] = "SPELL_CAST_START",
["source"] = "Master Machinist Dunstan",
["npcID"] = 217353,
},
[456861] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spore-infused Shalewing",
["npcID"] = 221217,
},
[433845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[441518] = {
["source"] = "Failed Batch",
["event"] = "SPELL_CAST_START",
["npcID"] = 220368,
},
[431544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Stoneswarmer",
["npcID"] = 216537,
},
[439984] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earthen-Ward Sentinel",
["npcID"] = 216221,
},
[449447] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[191732] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[449960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Kobyss",
["npcID"] = 215750,
},
[450728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[458657] = {
["source"] = "Awakened Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 225898,
},
[456868] = {
["source"] = "Sureki Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 222688,
},
[452009] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hijacked Ironstrider",
["npcID"] = 219287,
},
[459938] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[449453] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[449709] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[449965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Roots",
["npcID"] = 216250,
},
[431552] = {
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 224149,
},
[449455] = {
["source"] = "Ghastly Voidsoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 212453,
},
[422090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treant",
["npcID"] = 54983,
},
[452013] = {
["source"] = "Tempest Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 222797,
},
[451758] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[438971] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Ravenous Cinderbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218016,
},
[459687] = {
["source"] = "Shalba",
["event"] = "SPELL_CAST_START",
["npcID"] = 218171,
},
[440506] = {
["source"] = "Stream Skipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 213700,
},
[448691] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[452272] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kol Bruncrag",
["npcID"] = 213658,
},
[432068] = {
["source"] = "Rabaan",
["event"] = "SPELL_CAST_START",
["npcID"] = 228343,
},
[381430] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[447926] = {
["source"] = "Galvanized Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224779,
},
[343325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sindrel",
["npcID"] = 173445,
},
[458669] = {
["source"] = "Awakened Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 225898,
},
[445882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Mad Sow",
["npcID"] = 214930,
},
[427469] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[448441] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[437956] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[329774] = {
["encounterName"] = "Hungering Destroyer",
["source"] = "Hungering Destroyer",
["npcID"] = 164261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2383,
},
[458161] = {
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_START",
["npcID"] = 220285,
},
[444095] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chieftain Gillcarver",
["npcID"] = 219633,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["event"] = "SPELL_CAST_START",
["npcID"] = 221896,
},
[7978] = {
["source"] = "Zany Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 221982,
},
[452024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron-Runed Protector",
["npcID"] = 214576,
},
[341796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntsman Altimor",
["npcID"] = 165066,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[458675] = {
["source"] = "Awakened Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 225898,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[430288] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[440007] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron-Runed Protector",
["npcID"] = 214576,
},
[435148] = {
["source"] = "Risen Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212835,
},
[414945] = {
["source"] = "Fungarian Sporeflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 218667,
},
[440266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[451008] = {
["source"] = "Cinderbee Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 222820,
},
[275564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowstarved Bullfrog",
["npcID"] = 214406,
},
[456891] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[430805] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[456125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Clacker",
["npcID"] = 215881,
},
[157348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[451778] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Machine Speaker",
["npcID"] = 212878,
},
[452035] = {
["source"] = "Tempest Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 222797,
},
[446409] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[427484] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[325440] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Rockbound Vanquisher",
["npcID"] = 165764,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2402,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[458688] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[430812] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[59638] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 31216,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[462782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Defense Turret",
["npcID"] = 229678,
},
[455877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Abomination",
["npcID"] = 215654,
},
[424420] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[373526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunrise Honeysucker",
["npcID"] = 224133,
},
[3110] = {
["source"] = "Pippit",
["event"] = "SPELL_CAST_START",
["npcID"] = 416,
},
[424421] = {
["source"] = "Taener Duelmal",
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[446416] = {
["source"] = "Honey-fused Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 213697,
},
[437721] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[450509] = {
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 216584,
},
[456136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkshade",
["npcID"] = 218452,
},
[339770] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anima Crazed Worker",
["npcID"] = 173568,
},
[435165] = {
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_START",
["npcID"] = 217658,
},
[345397] = {
["encounterName"] = "Shriekwing",
["source"] = "Shriekwing",
["npcID"] = 164406,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2398,
},
[456905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Earthgorger",
["npcID"] = 218393,
},
[456138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimlurk",
["npcID"] = 223091,
},
[447955] = {
["source"] = "Alunira",
["event"] = "SPELL_CAST_START",
["npcID"] = 219281,
},
[456140] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimslice",
["npcID"] = 221551,
},
[443353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Truffle Gorger",
["npcID"] = 217754,
},
[459210] = {
["source"] = "Void Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[444377] = {
["source"] = "Highland Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 226179,
},
[373279] = {
["source"] = "Thing From Beyond",
["event"] = "SPELL_CAST_START",
["npcID"] = 189988,
},
[390926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candlelit Big-Boomer",
["npcID"] = 211546,
},
[456910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Earthgorger",
["npcID"] = 218393,
},
[429545] = {
["source"] = "Turned Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 214350,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[442589] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[424431] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[440288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[104318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Imp",
["npcID"] = 143622,
},
[463052] = {
["source"] = "Awakened Phalanx",
["event"] = "SPELL_CAST_START",
["npcID"] = 229782,
},
[458193] = {
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_START",
["npcID"] = 220285,
},
[455380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Railbot",
["npcID"] = 218251,
},
[452567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oath-Eater",
["npcID"] = 206844,
},
[439524] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[339527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kullan",
["npcID"] = 173469,
},
[440549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ragefin Executioner",
["npcID"] = 213408,
},
[452314] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kol Bruncrag",
["npcID"] = 213658,
},
[443363] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Swarming Sandwhisper",
["npcID"] = 215360,
},
[450781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Sticker",
["npcID"] = 212629,
},
[425974] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[317792] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[445412] = {
["source"] = "Shadowcrested Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216963,
},
[443111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Disciple",
["npcID"] = 216867,
},
[461781] = {
["source"] = "Sargassum Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212582,
},
[457434] = {
["source"] = "Riled Dirtdiver",
["event"] = "SPELL_CAST_START",
["npcID"] = 225905,
},
[449251] = {
["source"] = "Nerubian Threadmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208244,
},
[432116] = {
["source"] = "Candleclaw Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 213833,
},
[450786] = {
["source"] = "Cinderbee Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 222976,
},
[448485] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[461785] = {
["source"] = "Sargassum Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212582,
},
[451044] = {
["source"] = "Amber Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222846,
},
[388897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scuttling Sandshell",
["npcID"] = 224454,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[451812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Forgecaster",
["npcID"] = 212884,
},
[459229] = {
["source"] = "The Broken Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 214368,
},
[342863] = {
["encounterName"] = "Shriekwing",
["source"] = "Shriekwing",
["npcID"] = 164406,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2398,
},
[432120] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[31707] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[449768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Escaped Cutthroat",
["npcID"] = 219266,
},
[328287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Honored Duelist",
["npcID"] = 165265,
},
[458720] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[431612] = {
["source"] = "Venombane Spitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 216192,
},
[448492] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[432125] = {
["source"] = "Battlefront Hauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 222719,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[432638] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[432127] = {
["source"] = "Kix'arak",
["event"] = "SPELL_CAST_START",
["npcID"] = 224710,
},
[451820] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[433662] = {
["isChanneled"] = true,
["source"] = "Black Blood",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216856,
},
[457447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[449776] = {
["event"] = "SPELL_CAST_START",
["source"] = "Escaped Cutthroat",
["npcID"] = 219266,
},
[415250] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[456171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimlurk",
["npcID"] = 223091,
},
[449522] = {
["source"] = "Dreadstrike Flitterer",
["event"] = "SPELL_CAST_START",
["npcID"] = 213320,
},
[433410] = {
["source"] = "Chittering Fearmonger",
["event"] = "SPELL_CAST_START",
["npcID"] = 216583,
},
[450546] = {
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 216584,
},
[442618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Guard",
["npcID"] = 220974,
},
[459242] = {
["source"] = "Nix'k the Wicked",
["event"] = "SPELL_CAST_START",
["npcID"] = 219749,
},
[453616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard",
["npcID"] = 225493,
},
[398631] = {
["source"] = "Waxtail Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 212987,
},
[450037] = {
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220068,
},
[432135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Kobold",
["npcID"] = 216157,
},
[463081] = {
["source"] = "Awakened Phalanx",
["event"] = "SPELL_CAST_START",
["npcID"] = 229782,
},
[448248] = {
["source"] = "Bloodstained Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 223253,
},
[462826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Explosive Bomberbot",
["npcID"] = 229706,
},
[459246] = {
["source"] = "The Broken Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 214368,
},
[330604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Engorged Fearspinner",
["npcID"] = 168724,
},
[244969] = {
["encounterName"] = "Garothi Worldbreaker",
["source"] = "Garothi Worldbreaker",
["npcID"] = 122450,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2076,
},
[451064] = {
["source"] = "Amber Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222846,
},
[457458] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[447996] = {
["source"] = "Rustcloud Runt",
["event"] = "SPELL_CAST_START",
["npcID"] = 222796,
},
[435465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Machinist Protector",
["npcID"] = 219361,
},
[450043] = {
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220068,
},
[457460] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[458228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sakret'na",
["npcID"] = 215841,
},
[426771] = {
["source"] = "Void Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[432142] = {
["source"] = "Necrofang Reaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216191,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[341352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Court Hawkeye",
["npcID"] = 173190,
},
[341864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Gargon Rider",
["npcID"] = 174092,
},
[441351] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[341865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Court Executor",
["npcID"] = 174194,
},
[420125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Rock",
["npcID"] = 229792,
},
[448002] = {
["source"] = "Rustcloud Runt",
["event"] = "SPELL_CAST_START",
["npcID"] = 222796,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[383298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Magma Fury",
["npcID"] = 214924,
},
[341867] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Enforcer",
["npcID"] = 165469,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[455932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[434706] = {
["source"] = "Tasting Room Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214920,
},
[449285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Worm",
["npcID"] = 230215,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[431639] = {
["source"] = "Nerubian Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 212715,
},
[293954] = {
["source"] = "Eclipsing Grasp",
["event"] = "SPELL_CAST_START",
["npcID"] = 218693,
},
[444683] = {
["source"] = "Ramolith Curlhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221672,
},
[449031] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 215819,
},
[456147] = {
["source"] = "Bandtail Kestrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 220300,
},
[424462] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[424621] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 211291,
},
[341199] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Gargon Rider",
["npcID"] = 174092,
},
[398394] = {
["source"] = "Disturbed Krolusk",
["event"] = "SPELL_CAST_START",
["npcID"] = 229813,
},
[368983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wickbreaker",
["npcID"] = 215077,
},
[433411] = {
["source"] = "Nerubian Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 208242,
},
[325506] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Rockbound Vanquisher",
["npcID"] = 165764,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2402,
},
[188046] = {
["source"] = "Denizen of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 198489,
},
[455939] = {
["source"] = "Deepcrawler Tx'kesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 222624,
},
[449034] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[449290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shyalude",
["npcID"] = 223834,
},
[430109] = {
["source"] = "Cursed Thunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207198,
},
[453894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ren'khat",
["npcID"] = 222152,
},
[433785] = {
["source"] = "Reinforced Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 216363,
},
[449130] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[342310] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Artificer Xy'mox",
["npcID"] = 166644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2405,
},
[339975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Conservator",
["npcID"] = 173609,
},
[431645] = {
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 212717,
},
[456453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skardyn Husk",
["npcID"] = 213566,
},
[442387] = {
["source"] = "Necrofang Reaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216191,
},
[317791] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[440551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ragefin Executioner",
["npcID"] = 213408,
},
[341520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Tracker",
["npcID"] = 173973,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[57984] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[341621] = {
["encounterName"] = "Lady Inerva Darkvein",
["source"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2406,
},
[329455] = {
["encounterName"] = "Hungering Destroyer",
["source"] = "Hungering Destroyer",
["npcID"] = 164261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2383,
},
[339557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deplina",
["npcID"] = 173464,
},
[426277] = {
["isChanneled"] = true,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[432113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord",
["npcID"] = 228575,
},
[415253] = {
["source"] = "Invasive Sporecap",
["event"] = "SPELL_CAST_START",
["npcID"] = 207482,
},
[429091] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[444692] = {
["source"] = "Ramolith Curlhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221672,
},
[427260] = {
["source"] = "Cursed Rooktender",
["event"] = "SPELL_CAST_START",
["npcID"] = 207199,
},
[431697] = {
["source"] = "Maddened Hierophant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214398,
},
[446483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Toadstomper",
["npcID"] = 207803,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[432673] = {
["source"] = "Kobold Looter",
["event"] = "SPELL_CAST_START",
["npcID"] = 216303,
},
[445205] = {
["source"] = "Cinderbee Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 215024,
},
[453188] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cragmund",
["npcID"] = 220269,
},
[457993] = {
["source"] = "Croakit",
["event"] = "SPELL_CAST_START",
["npcID"] = 214757,
},
[429422] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[334404] = {
["encounterName"] = "Huntsman Altimor",
["source"] = "Huntsman Altimor",
["npcID"] = 165066,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2418,
},
[423979] = {
["source"] = "Void Cursed Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214419,
},
[445718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparklit Rust Crusher",
["npcID"] = 212597,
},
[451900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Soot-Seer",
["npcID"] = 212876,
},
[448276] = {
["source"] = "Fungarian Sporeflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 218667,
},
[343322] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moldovaak",
["npcID"] = 168337,
},
[441627] = {
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214673,
},
[455480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Take",
["npcID"] = 226272,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[388349] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[426283] = {
["source"] = "Cursedheart Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 212389,
},
[334797] = {
["encounterName"] = "Huntsman Altimor",
["source"] = "Bargast",
["npcID"] = 169457,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2418,
},
[343320] = {
["event"] = "SPELL_CAST_START",
["source"] = "Caramain",
["npcID"] = 173444,
},
[462856] = {
["source"] = "Nullbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229729,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[462802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Machinist",
["npcID"] = 229695,
},
[240277] = {
["encounterName"] = "Garothi Worldbreaker",
["source"] = "Garothi Worldbreaker",
["npcID"] = 122450,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2076,
},
[116] = {
["npcID"] = 188027,
},
[448791] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[330593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Engorged Fearspinner",
["npcID"] = 168724,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[449815] = {
["source"] = "Sandres the Relicbearer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217534,
},
[427601] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[319383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregate of Doom",
["npcID"] = 165706,
},
[462859] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[433448] = {
["isChanneled"] = true,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216621,
},
[458256] = {
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_START",
["npcID"] = 220285,
},
[455443] = {
["source"] = "Waxx",
["event"] = "SPELL_CAST_START",
["npcID"] = 226267,
},
[197735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Putrid Engineer",
["npcID"] = 126337,
},
[449817] = {
["isChanneled"] = true,
["source"] = "Toxic Swarmite",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222721,
},
[456211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Clacker",
["npcID"] = 215881,
},
[424423] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 211291,
},
[451608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[458685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
["420907"] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[456468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skardyn Husk",
["npcID"] = 213566,
},
[458770] = {
["source"] = "Awakened Sulfuric Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 225894,
},
[441410] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[453144] = {
["source"] = "Tephratennae",
["event"] = "SPELL_CAST_START",
["npcID"] = 221126,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[444449] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[444705] = {
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_START",
["npcID"] = 207949,
},
[445984] = {
["source"] = "Burrowing Jawcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 229821,
},
[445217] = {
["source"] = "Cinderbee Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 215024,
},
[389518] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[53824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undertide Deepfisher",
["npcID"] = 226961,
},
[455812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[153485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Chasm Worm",
["npcID"] = 217962,
},
[440615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ragefin Shadowcaster",
["npcID"] = 213405,
},
[461836] = {
["source"] = "Waxtail Candleflyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219343,
},
[443027] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Hollows Duelist",
["npcID"] = 225148,
},
[449567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunless Tidemarshal",
["npcID"] = 219602,
},
[452539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[438826] = {
["source"] = "Atik",
["event"] = "SPELL_CAST_START",
["npcID"] = 217533,
},
[458775] = {
["source"] = "Awakened Sulfuric Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 225894,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["event"] = "SPELL_CAST_START",
["npcID"] = 221896,
},
[343005] = {
["encounterName"] = "Shriekwing",
["source"] = "Shriekwing",
["npcID"] = 164406,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2398,
},
[434505] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[432967] = {
["source"] = "Sentry Stagshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 216340,
},
[341131] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Siphoner",
["npcID"] = 165472,
},
[446477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepsludger",
["npcID"] = 216536,
},
[61353] = {
["source"] = "Dagna Flintlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 96779,
},
[456101] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reconstructed Skardyn",
["npcID"] = 219245,
},
[429110] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[444055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arachnoid Scrounger",
["npcID"] = 218725,
},
[376426] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Condensing Sprite",
["npcID"] = 215362,
},
[328857] = {
["encounterName"] = "Shriekwing",
["source"] = "Shriekwing",
["npcID"] = 164406,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2398,
},
[341133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathrian Executor",
["npcID"] = 165470,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[340622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rat of Unusual Size",
["npcID"] = 173798,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[381535] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Scornful Sandshoal",
["npcID"] = 214662,
},
[399701] = {
["source"] = "Disturbed Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215773,
},
[340623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rat of Unusual Size",
["npcID"] = 173798,
},
[377502] = {
["source"] = "Proscenium Puddlestomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216072,
},
[458780] = {
["source"] = "Awakened Sulfuric Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 225894,
},
[427323] = {
["source"] = "Voidrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[440876] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[449318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[438973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[455273] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Abominable Wavecrasher",
["npcID"] = 216526,
},
[378413] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[457503] = {
["source"] = "Cogchewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212617,
},
[118905] = {
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 61245,
},
[449831] = {
["isChanneled"] = true,
["source"] = "Battlefront Hauler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222719,
},
[458271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[434998] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[427356] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[340627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rat of Unusual Size",
["npcID"] = 173798,
},
[431674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaheti Ambusher",
["npcID"] = 217448,
},
[275563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowstarved Bullfrog",
["npcID"] = 214406,
},
[396302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roiling Steam",
["npcID"] = 226621,
},
[434786] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[427583] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[449154] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[387950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Candlecrusher",
["npcID"] = 219619,
},
[431549] = {
["source"] = "Sazh'kel",
["event"] = "SPELL_CAST_START",
["npcID"] = 221166,
},
[442418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Profiteer Xir'ek",
["npcID"] = 226230,
},
[440372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206077,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[426964] = {
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 206705,
},
[267997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Charhound",
["npcID"] = 226269,
},
[374719] = {
["source"] = "Mudstone Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 226700,
},
[451734] = {
["source"] = "Persistent Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222843,
},
[449584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunless Tidemarshal",
["npcID"] = 219602,
},
[340631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sewer Rat",
["npcID"] = 173800,
},
[455277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[455975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reconstructed Skardyn",
["npcID"] = 219245,
},
[444722] = {
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_START",
["npcID"] = 207949,
},
[446000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deeps Larva",
["npcID"] = 215733,
},
[431935] = {
["event"] = "SPELL_CAST_START",
["source"] = "Profiteer Xir'ek",
["npcID"] = 226230,
},
[452651] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oath-Eater",
["npcID"] = 206844,
},
[384366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashwhite Kestrel",
["npcID"] = 215070,
},
[458278] = {
["source"] = "Lurker of the Deeps",
["event"] = "SPELL_CAST_START",
["npcID"] = 220285,
},
[432959] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[341146] = {
["event"] = "SPELL_CAST_START",
["source"] = "Court Hierarch",
["npcID"] = 165483,
},
[435004] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[453161] = {
["source"] = "Hulking Bloodguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 216338,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[456745] = {
["source"] = "Crimson Deathweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222692,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[385024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stillpond Tidewader",
["npcID"] = 214835,
},
[448944] = {
["source"] = "Kobold Snuffercrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218662,
},
[456746] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[427382] = {
["source"] = "Engine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212764,
},
[432059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Geomancer",
["npcID"] = 212528,
},
[446261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emboldened Fog Wither",
["npcID"] = 219909,
},
[450697] = {
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215023,
},
[456866] = {
["source"] = "Sureki Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 222688,
},
[430013] = {
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_START",
["npcID"] = 207186,
},
[426619] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212993,
},
[456748] = {
["source"] = "Crimson Deathweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222692,
},
[431659] = {
["source"] = "Clotweave Widow",
["event"] = "SPELL_CAST_START",
["npcID"] = 216193,
},
[438823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diabolic Imp",
["npcID"] = 219161,
},
[371584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Escaped Steam",
["npcID"] = 227383,
},
[446519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbral Shalehorn",
["npcID"] = 227933,
},
[448684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparking Electroscythes",
["npcID"] = 219970,
},
[444985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pupating Stinger",
["npcID"] = 216288,
},
[343316] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hargitas",
["npcID"] = 173446,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[446776] = {
["encounterName"] = "Captain Dailcry",
["source"] = "War Lynx",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 206699,
},
[434756] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[390256] = {
["source"] = "Proscenium Punk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215791,
},
[455984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reconstructed Skardyn",
["npcID"] = 219245,
},
[429109] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[427852] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[456438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Miner",
["npcID"] = 213565,
},
[458610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Toadstomper",
["npcID"] = 207803,
},
[205231] = {
["source"] = "Darkglare",
["event"] = "SPELL_CAST_START",
["npcID"] = 103673,
},
[447921] = {
["source"] = "Galvanized Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224779,
},
[450941] = {
["source"] = "Cinderbee Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 222820,
},
[427342] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[391793] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[436322] = {
["source"] = "Atik",
["event"] = "SPELL_CAST_START",
["npcID"] = 217533,
},
[462892] = {
["source"] = "Malfunctioning Pylon",
["event"] = "SPELL_CAST_START",
["npcID"] = 229739,
},
[452918] = {
["source"] = "Arathi Avenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 221980,
},
[457266] = {
["source"] = "Greenhorn Extra",
["event"] = "SPELL_CAST_START",
["npcID"] = 228307,
},
[433053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[431180] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[135029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[378420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Rock",
["npcID"] = 229792,
},
[428879] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[335187] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Thirstlurker",
["npcID"] = 163960,
},
[340646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Carved Assistant",
["npcID"] = 173802,
},
[387960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Candlecrusher",
["npcID"] = 219619,
},
[338011] = {
["event"] = "SPELL_CAST_START",
["source"] = "Violent Muckmare",
["npcID"] = 166318,
},
[427346] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[343159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Caramain",
["npcID"] = 173444,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[434252] = {
["source"] = "Nerubian Hauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 217039,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[340057] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kennel Overseer",
["npcID"] = 174070,
},
[460595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Weary Laborer",
["npcID"] = 224759,
},
[445207] = {
["source"] = "Void Bound Howler",
["event"] = "SPELL_CAST_START",
["npcID"] = 221979,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[448787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[316353] = {
["source"] = "Arathi Avenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 221980,
},
[328885] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "High Torturer Darithos",
["npcID"] = 168973,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2402,
},
[432114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Forgecaster",
["npcID"] = 212884,
},
[381570] = {
["encounterName"] = "Captain Dailcry",
["event"] = "SPELL_CAST_START",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[445252] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[333612] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winged Ravager",
["npcID"] = 173146,
},
[334266] = {
["encounterName"] = "Hungering Destroyer",
["source"] = "Hungering Destroyer",
["npcID"] = 164261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2383,
},
[377923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Superheated Slag",
["npcID"] = 227382,
},
[342280] = {
["encounterName"] = "Lady Inerva Darkvein",
["source"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2406,
},
[456653] = {
["source"] = "Rabaan",
["event"] = "SPELL_CAST_START",
["npcID"] = 228343,
},
[339629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorging Mite",
["npcID"] = 173145,
},
[452177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Reserve",
["npcID"] = 214429,
},
[446533] = {
["source"] = "Mycotic Shalehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 212704,
},
[444743] = {
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 221760,
},
[341715] = {
["event"] = "SPELL_CAST_START",
["source"] = "Countess Gloomveil",
["npcID"] = 174162,
},
[325590] = {
["encounterName"] = "Sun King's Salvation",
["source"] = "Vile Occultist",
["npcID"] = 165763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2402,
},
[378394] = {
["source"] = "Riled Kelpcoil",
["event"] = "SPELL_CAST_START",
["npcID"] = 225901,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[427609] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[415403] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lurker of the Deeps",
["npcID"] = 220285,
},
[428150] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[453879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Overspinner Antourix",
["npcID"] = 225263,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2024-09-06 10:08:55 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Uncharged",
"2024-09-05 23:41:00 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Uncharged",
"2024-09-05 23:36:52 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 22:36:05 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Uncharged",
"2024-09-05 22:30:44 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unusual",
"2024-09-05 22:26:01 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unsanctify",
"2024-09-05 22:25:17 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 12:35:57 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 12:19:40 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 11:15:19 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Uncharged",
"2024-09-05 10:55:39 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Uncharged",
"2024-09-05 10:50:54 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhaltedx",
"2024-09-05 10:34:13 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 08:49:32 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-05 00:01:17 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-04 23:55:08 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-04 23:36:02 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
"2024-09-04 23:32:31 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unsanctify",
"2024-09-04 22:32:39 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Unhalted",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
